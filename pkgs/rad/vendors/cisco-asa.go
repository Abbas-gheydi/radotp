// Code generated by radius-dict-gen. DO NOT EDIT.

package vendors

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_CiscoASA_VendorID = 3076
)

func _CiscoASA_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_CiscoASA_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _CiscoASA_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _CiscoASA_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _CiscoASA_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _CiscoASA_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _CiscoASA_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _CiscoASA_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _CiscoASA_AddVendor(p, typ, attr)
}

func _CiscoASA_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _CiscoASA_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type ASASimultaneousLogins uint32

var ASASimultaneousLogins_Strings = map[ASASimultaneousLogins]string{}

func (a ASASimultaneousLogins) String() string {
	if str, ok := ASASimultaneousLogins_Strings[a]; ok {
		return str
	}
	return "ASASimultaneousLogins(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASimultaneousLogins_Add(p *radius.Packet, value ASASimultaneousLogins) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 2, a)
}

func ASASimultaneousLogins_Get(p *radius.Packet) (value ASASimultaneousLogins) {
	value, _ = ASASimultaneousLogins_Lookup(p)
	return
}

func ASASimultaneousLogins_Gets(p *radius.Packet) (values []ASASimultaneousLogins, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASimultaneousLogins(i))
	}
	return
}

func ASASimultaneousLogins_Lookup(p *radius.Packet) (value ASASimultaneousLogins, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASimultaneousLogins(i)
	return
}

func ASASimultaneousLogins_Set(p *radius.Packet, value ASASimultaneousLogins) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 2, a)
}

func ASASimultaneousLogins_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 2)
}

func ASAPrimaryDNS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 5, a)
}

func ASAPrimaryDNS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 5, a)
}

func ASAPrimaryDNS_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAPrimaryDNS_Lookup(p)
	return
}

func ASAPrimaryDNS_GetString(p *radius.Packet) (value string) {
	value, _ = ASAPrimaryDNS_LookupString(p)
	return
}

func ASAPrimaryDNS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAPrimaryDNS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAPrimaryDNS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAPrimaryDNS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAPrimaryDNS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 5, a)
}

func ASAPrimaryDNS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 5, a)
}

func ASAPrimaryDNS_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 5)
}

func ASASecondaryDNS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 6, a)
}

func ASASecondaryDNS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 6, a)
}

func ASASecondaryDNS_Get(p *radius.Packet) (value []byte) {
	value, _ = ASASecondaryDNS_Lookup(p)
	return
}

func ASASecondaryDNS_GetString(p *radius.Packet) (value string) {
	value, _ = ASASecondaryDNS_LookupString(p)
	return
}

func ASASecondaryDNS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASecondaryDNS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASecondaryDNS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASASecondaryDNS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASASecondaryDNS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 6, a)
}

func ASASecondaryDNS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 6, a)
}

func ASASecondaryDNS_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 6)
}

func ASAPrimaryWINS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 7, a)
}

func ASAPrimaryWINS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 7, a)
}

func ASAPrimaryWINS_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAPrimaryWINS_Lookup(p)
	return
}

func ASAPrimaryWINS_GetString(p *radius.Packet) (value string) {
	value, _ = ASAPrimaryWINS_LookupString(p)
	return
}

func ASAPrimaryWINS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAPrimaryWINS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAPrimaryWINS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAPrimaryWINS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAPrimaryWINS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 7, a)
}

func ASAPrimaryWINS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 7, a)
}

func ASAPrimaryWINS_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 7)
}

func ASASecondaryWINS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 8, a)
}

func ASASecondaryWINS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 8, a)
}

func ASASecondaryWINS_Get(p *radius.Packet) (value []byte) {
	value, _ = ASASecondaryWINS_Lookup(p)
	return
}

func ASASecondaryWINS_GetString(p *radius.Packet) (value string) {
	value, _ = ASASecondaryWINS_LookupString(p)
	return
}

func ASASecondaryWINS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASecondaryWINS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASecondaryWINS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASASecondaryWINS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASASecondaryWINS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 8, a)
}

func ASASecondaryWINS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 8, a)
}

func ASASecondaryWINS_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 8)
}

type ASASEPCardAssignment uint32

var ASASEPCardAssignment_Strings = map[ASASEPCardAssignment]string{}

func (a ASASEPCardAssignment) String() string {
	if str, ok := ASASEPCardAssignment_Strings[a]; ok {
		return str
	}
	return "ASASEPCardAssignment(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASEPCardAssignment_Add(p *radius.Packet, value ASASEPCardAssignment) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 9, a)
}

func ASASEPCardAssignment_Get(p *radius.Packet) (value ASASEPCardAssignment) {
	value, _ = ASASEPCardAssignment_Lookup(p)
	return
}

func ASASEPCardAssignment_Gets(p *radius.Packet) (values []ASASEPCardAssignment, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASEPCardAssignment(i))
	}
	return
}

func ASASEPCardAssignment_Lookup(p *radius.Packet) (value ASASEPCardAssignment, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASEPCardAssignment(i)
	return
}

func ASASEPCardAssignment_Set(p *radius.Packet, value ASASEPCardAssignment) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 9, a)
}

func ASASEPCardAssignment_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 9)
}

type ASATunnelingProtocols uint32

var ASATunnelingProtocols_Strings = map[ASATunnelingProtocols]string{}

func (a ASATunnelingProtocols) String() string {
	if str, ok := ASATunnelingProtocols_Strings[a]; ok {
		return str
	}
	return "ASATunnelingProtocols(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASATunnelingProtocols_Add(p *radius.Packet, value ASATunnelingProtocols) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 11, a)
}

func ASATunnelingProtocols_Get(p *radius.Packet) (value ASATunnelingProtocols) {
	value, _ = ASATunnelingProtocols_Lookup(p)
	return
}

func ASATunnelingProtocols_Gets(p *radius.Packet) (values []ASATunnelingProtocols, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASATunnelingProtocols(i))
	}
	return
}

func ASATunnelingProtocols_Lookup(p *radius.Packet) (value ASATunnelingProtocols, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASATunnelingProtocols(i)
	return
}

func ASATunnelingProtocols_Set(p *radius.Packet, value ASATunnelingProtocols) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 11, a)
}

func ASATunnelingProtocols_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 11)
}

func ASAIPsecSecAssociation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 12, a)
}

func ASAIPsecSecAssociation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 12, a)
}

func ASAIPsecSecAssociation_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIPsecSecAssociation_Lookup(p)
	return
}

func ASAIPsecSecAssociation_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIPsecSecAssociation_LookupString(p)
	return
}

func ASAIPsecSecAssociation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecSecAssociation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecSecAssociation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIPsecSecAssociation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIPsecSecAssociation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 12, a)
}

func ASAIPsecSecAssociation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 12, a)
}

func ASAIPsecSecAssociation_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 12)
}

type ASAIPsecAuthentication uint32

const (
	ASAIPsecAuthentication_Value_None                    ASAIPsecAuthentication = 0
	ASAIPsecAuthentication_Value_RADIUS                  ASAIPsecAuthentication = 1
	ASAIPsecAuthentication_Value_LDAPAuthorizationOnly   ASAIPsecAuthentication = 2
	ASAIPsecAuthentication_Value_NTDomain                ASAIPsecAuthentication = 3
	ASAIPsecAuthentication_Value_SDI                     ASAIPsecAuthentication = 4
	ASAIPsecAuthentication_Value_Internal                ASAIPsecAuthentication = 5
	ASAIPsecAuthentication_Value_RADIUSWithExpiry        ASAIPsecAuthentication = 6
	ASAIPsecAuthentication_Value_KerberosActiveDirectory ASAIPsecAuthentication = 7
)

var ASAIPsecAuthentication_Strings = map[ASAIPsecAuthentication]string{
	ASAIPsecAuthentication_Value_None:                    "None",
	ASAIPsecAuthentication_Value_RADIUS:                  "RADIUS",
	ASAIPsecAuthentication_Value_LDAPAuthorizationOnly:   "LDAP-Authorization-only",
	ASAIPsecAuthentication_Value_NTDomain:                "NT-Domain",
	ASAIPsecAuthentication_Value_SDI:                     "SDI",
	ASAIPsecAuthentication_Value_Internal:                "Internal",
	ASAIPsecAuthentication_Value_RADIUSWithExpiry:        "RADIUS-with-Expiry",
	ASAIPsecAuthentication_Value_KerberosActiveDirectory: "Kerberos/Active-Directory",
}

func (a ASAIPsecAuthentication) String() string {
	if str, ok := ASAIPsecAuthentication_Strings[a]; ok {
		return str
	}
	return "ASAIPsecAuthentication(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecAuthentication_Add(p *radius.Packet, value ASAIPsecAuthentication) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 13, a)
}

func ASAIPsecAuthentication_Get(p *radius.Packet) (value ASAIPsecAuthentication) {
	value, _ = ASAIPsecAuthentication_Lookup(p)
	return
}

func ASAIPsecAuthentication_Gets(p *radius.Packet) (values []ASAIPsecAuthentication, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecAuthentication(i))
	}
	return
}

func ASAIPsecAuthentication_Lookup(p *radius.Packet) (value ASAIPsecAuthentication, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecAuthentication(i)
	return
}

func ASAIPsecAuthentication_Set(p *radius.Packet, value ASAIPsecAuthentication) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 13, a)
}

func ASAIPsecAuthentication_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 13)
}

func ASABanner1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 15, a)
}

func ASABanner1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 15, a)
}

func ASABanner1_Get(p *radius.Packet) (value []byte) {
	value, _ = ASABanner1_Lookup(p)
	return
}

func ASABanner1_GetString(p *radius.Packet) (value string) {
	value, _ = ASABanner1_LookupString(p)
	return
}

func ASABanner1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASABanner1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASABanner1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASABanner1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASABanner1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 15, a)
}

func ASABanner1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 15, a)
}

func ASABanner1_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 15)
}

type ASAIPsecAllowPasswdStore uint32

const (
	ASAIPsecAllowPasswdStore_Value_Disabled ASAIPsecAllowPasswdStore = 0
	ASAIPsecAllowPasswdStore_Value_Enabled  ASAIPsecAllowPasswdStore = 1
)

var ASAIPsecAllowPasswdStore_Strings = map[ASAIPsecAllowPasswdStore]string{
	ASAIPsecAllowPasswdStore_Value_Disabled: "Disabled",
	ASAIPsecAllowPasswdStore_Value_Enabled:  "Enabled",
}

func (a ASAIPsecAllowPasswdStore) String() string {
	if str, ok := ASAIPsecAllowPasswdStore_Strings[a]; ok {
		return str
	}
	return "ASAIPsecAllowPasswdStore(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecAllowPasswdStore_Add(p *radius.Packet, value ASAIPsecAllowPasswdStore) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 16, a)
}

func ASAIPsecAllowPasswdStore_Get(p *radius.Packet) (value ASAIPsecAllowPasswdStore) {
	value, _ = ASAIPsecAllowPasswdStore_Lookup(p)
	return
}

func ASAIPsecAllowPasswdStore_Gets(p *radius.Packet) (values []ASAIPsecAllowPasswdStore, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecAllowPasswdStore(i))
	}
	return
}

func ASAIPsecAllowPasswdStore_Lookup(p *radius.Packet) (value ASAIPsecAllowPasswdStore, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecAllowPasswdStore(i)
	return
}

func ASAIPsecAllowPasswdStore_Set(p *radius.Packet, value ASAIPsecAllowPasswdStore) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 16, a)
}

func ASAIPsecAllowPasswdStore_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 16)
}

type ASAUseClientAddress uint32

const (
	ASAUseClientAddress_Value_Disabled ASAUseClientAddress = 0
	ASAUseClientAddress_Value_Enabled  ASAUseClientAddress = 1
)

var ASAUseClientAddress_Strings = map[ASAUseClientAddress]string{
	ASAUseClientAddress_Value_Disabled: "Disabled",
	ASAUseClientAddress_Value_Enabled:  "Enabled",
}

func (a ASAUseClientAddress) String() string {
	if str, ok := ASAUseClientAddress_Strings[a]; ok {
		return str
	}
	return "ASAUseClientAddress(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAUseClientAddress_Add(p *radius.Packet, value ASAUseClientAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 17, a)
}

func ASAUseClientAddress_Get(p *radius.Packet) (value ASAUseClientAddress) {
	value, _ = ASAUseClientAddress_Lookup(p)
	return
}

func ASAUseClientAddress_Gets(p *radius.Packet) (values []ASAUseClientAddress, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAUseClientAddress(i))
	}
	return
}

func ASAUseClientAddress_Lookup(p *radius.Packet) (value ASAUseClientAddress, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAUseClientAddress(i)
	return
}

func ASAUseClientAddress_Set(p *radius.Packet, value ASAUseClientAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 17, a)
}

func ASAUseClientAddress_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 17)
}

type ASAPPTPEncryption uint32

var ASAPPTPEncryption_Strings = map[ASAPPTPEncryption]string{}

func (a ASAPPTPEncryption) String() string {
	if str, ok := ASAPPTPEncryption_Strings[a]; ok {
		return str
	}
	return "ASAPPTPEncryption(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAPPTPEncryption_Add(p *radius.Packet, value ASAPPTPEncryption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 20, a)
}

func ASAPPTPEncryption_Get(p *radius.Packet) (value ASAPPTPEncryption) {
	value, _ = ASAPPTPEncryption_Lookup(p)
	return
}

func ASAPPTPEncryption_Gets(p *radius.Packet) (values []ASAPPTPEncryption, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAPPTPEncryption(i))
	}
	return
}

func ASAPPTPEncryption_Lookup(p *radius.Packet) (value ASAPPTPEncryption, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAPPTPEncryption(i)
	return
}

func ASAPPTPEncryption_Set(p *radius.Packet, value ASAPPTPEncryption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 20, a)
}

func ASAPPTPEncryption_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 20)
}

type ASAL2TPEncryption uint32

var ASAL2TPEncryption_Strings = map[ASAL2TPEncryption]string{}

func (a ASAL2TPEncryption) String() string {
	if str, ok := ASAL2TPEncryption_Strings[a]; ok {
		return str
	}
	return "ASAL2TPEncryption(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAL2TPEncryption_Add(p *radius.Packet, value ASAL2TPEncryption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 21, a)
}

func ASAL2TPEncryption_Get(p *radius.Packet) (value ASAL2TPEncryption) {
	value, _ = ASAL2TPEncryption_Lookup(p)
	return
}

func ASAL2TPEncryption_Gets(p *radius.Packet) (values []ASAL2TPEncryption, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAL2TPEncryption(i))
	}
	return
}

func ASAL2TPEncryption_Lookup(p *radius.Packet) (value ASAL2TPEncryption, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAL2TPEncryption(i)
	return
}

func ASAL2TPEncryption_Set(p *radius.Packet, value ASAL2TPEncryption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 21, a)
}

func ASAL2TPEncryption_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 21)
}

func ASAGroupPolicy_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 25, a)
}

func ASAGroupPolicy_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 25, a)
}

func ASAGroupPolicy_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAGroupPolicy_Lookup(p)
	return
}

func ASAGroupPolicy_GetString(p *radius.Packet) (value string) {
	value, _ = ASAGroupPolicy_LookupString(p)
	return
}

func ASAGroupPolicy_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAGroupPolicy_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAGroupPolicy_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAGroupPolicy_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAGroupPolicy_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 25, a)
}

func ASAGroupPolicy_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 25, a)
}

func ASAGroupPolicy_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 25)
}

func ASAIPsecSplitTunnelList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 27, a)
}

func ASAIPsecSplitTunnelList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 27, a)
}

func ASAIPsecSplitTunnelList_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIPsecSplitTunnelList_Lookup(p)
	return
}

func ASAIPsecSplitTunnelList_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIPsecSplitTunnelList_LookupString(p)
	return
}

func ASAIPsecSplitTunnelList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecSplitTunnelList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecSplitTunnelList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIPsecSplitTunnelList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIPsecSplitTunnelList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 27, a)
}

func ASAIPsecSplitTunnelList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 27, a)
}

func ASAIPsecSplitTunnelList_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 27)
}

func ASAIPsecDefaultDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 28, a)
}

func ASAIPsecDefaultDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 28, a)
}

func ASAIPsecDefaultDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIPsecDefaultDomain_Lookup(p)
	return
}

func ASAIPsecDefaultDomain_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIPsecDefaultDomain_LookupString(p)
	return
}

func ASAIPsecDefaultDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecDefaultDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecDefaultDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIPsecDefaultDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIPsecDefaultDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 28, a)
}

func ASAIPsecDefaultDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 28, a)
}

func ASAIPsecDefaultDomain_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 28)
}

func ASAIPsecSplitDNSNames_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 29, a)
}

func ASAIPsecSplitDNSNames_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 29, a)
}

func ASAIPsecSplitDNSNames_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIPsecSplitDNSNames_Lookup(p)
	return
}

func ASAIPsecSplitDNSNames_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIPsecSplitDNSNames_LookupString(p)
	return
}

func ASAIPsecSplitDNSNames_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecSplitDNSNames_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecSplitDNSNames_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIPsecSplitDNSNames_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIPsecSplitDNSNames_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 29, a)
}

func ASAIPsecSplitDNSNames_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 29, a)
}

func ASAIPsecSplitDNSNames_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 29)
}

type ASAIPsecTunnelType uint32

const (
	ASAIPsecTunnelType_Value_LANToLAN     ASAIPsecTunnelType = 1
	ASAIPsecTunnelType_Value_RemoteAccess ASAIPsecTunnelType = 2
)

var ASAIPsecTunnelType_Strings = map[ASAIPsecTunnelType]string{
	ASAIPsecTunnelType_Value_LANToLAN:     "LAN-to-LAN",
	ASAIPsecTunnelType_Value_RemoteAccess: "Remote-Access",
}

func (a ASAIPsecTunnelType) String() string {
	if str, ok := ASAIPsecTunnelType_Strings[a]; ok {
		return str
	}
	return "ASAIPsecTunnelType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecTunnelType_Add(p *radius.Packet, value ASAIPsecTunnelType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 30, a)
}

func ASAIPsecTunnelType_Get(p *radius.Packet) (value ASAIPsecTunnelType) {
	value, _ = ASAIPsecTunnelType_Lookup(p)
	return
}

func ASAIPsecTunnelType_Gets(p *radius.Packet) (values []ASAIPsecTunnelType, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecTunnelType(i))
	}
	return
}

func ASAIPsecTunnelType_Lookup(p *radius.Packet) (value ASAIPsecTunnelType, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecTunnelType(i)
	return
}

func ASAIPsecTunnelType_Set(p *radius.Packet, value ASAIPsecTunnelType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 30, a)
}

func ASAIPsecTunnelType_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 30)
}

type ASAIPsecModeConfig uint32

const (
	ASAIPsecModeConfig_Value_Disabled ASAIPsecModeConfig = 0
	ASAIPsecModeConfig_Value_Enabled  ASAIPsecModeConfig = 1
)

var ASAIPsecModeConfig_Strings = map[ASAIPsecModeConfig]string{
	ASAIPsecModeConfig_Value_Disabled: "Disabled",
	ASAIPsecModeConfig_Value_Enabled:  "Enabled",
}

func (a ASAIPsecModeConfig) String() string {
	if str, ok := ASAIPsecModeConfig_Strings[a]; ok {
		return str
	}
	return "ASAIPsecModeConfig(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecModeConfig_Add(p *radius.Packet, value ASAIPsecModeConfig) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 31, a)
}

func ASAIPsecModeConfig_Get(p *radius.Packet) (value ASAIPsecModeConfig) {
	value, _ = ASAIPsecModeConfig_Lookup(p)
	return
}

func ASAIPsecModeConfig_Gets(p *radius.Packet) (values []ASAIPsecModeConfig, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecModeConfig(i))
	}
	return
}

func ASAIPsecModeConfig_Lookup(p *radius.Packet) (value ASAIPsecModeConfig, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecModeConfig(i)
	return
}

func ASAIPsecModeConfig_Set(p *radius.Packet, value ASAIPsecModeConfig) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 31, a)
}

func ASAIPsecModeConfig_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 31)
}

type ASAIPsecOverUDP uint32

const (
	ASAIPsecOverUDP_Value_Disabled ASAIPsecOverUDP = 0
	ASAIPsecOverUDP_Value_Enabled  ASAIPsecOverUDP = 1
)

var ASAIPsecOverUDP_Strings = map[ASAIPsecOverUDP]string{
	ASAIPsecOverUDP_Value_Disabled: "Disabled",
	ASAIPsecOverUDP_Value_Enabled:  "Enabled",
}

func (a ASAIPsecOverUDP) String() string {
	if str, ok := ASAIPsecOverUDP_Strings[a]; ok {
		return str
	}
	return "ASAIPsecOverUDP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecOverUDP_Add(p *radius.Packet, value ASAIPsecOverUDP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 34, a)
}

func ASAIPsecOverUDP_Get(p *radius.Packet) (value ASAIPsecOverUDP) {
	value, _ = ASAIPsecOverUDP_Lookup(p)
	return
}

func ASAIPsecOverUDP_Gets(p *radius.Packet) (values []ASAIPsecOverUDP, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecOverUDP(i))
	}
	return
}

func ASAIPsecOverUDP_Lookup(p *radius.Packet) (value ASAIPsecOverUDP, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecOverUDP(i)
	return
}

func ASAIPsecOverUDP_Set(p *radius.Packet, value ASAIPsecOverUDP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 34, a)
}

func ASAIPsecOverUDP_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 34)
}

type ASAIPsecOverUDPPort uint32

var ASAIPsecOverUDPPort_Strings = map[ASAIPsecOverUDPPort]string{}

func (a ASAIPsecOverUDPPort) String() string {
	if str, ok := ASAIPsecOverUDPPort_Strings[a]; ok {
		return str
	}
	return "ASAIPsecOverUDPPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecOverUDPPort_Add(p *radius.Packet, value ASAIPsecOverUDPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 35, a)
}

func ASAIPsecOverUDPPort_Get(p *radius.Packet) (value ASAIPsecOverUDPPort) {
	value, _ = ASAIPsecOverUDPPort_Lookup(p)
	return
}

func ASAIPsecOverUDPPort_Gets(p *radius.Packet) (values []ASAIPsecOverUDPPort, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecOverUDPPort(i))
	}
	return
}

func ASAIPsecOverUDPPort_Lookup(p *radius.Packet) (value ASAIPsecOverUDPPort, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecOverUDPPort(i)
	return
}

func ASAIPsecOverUDPPort_Set(p *radius.Packet, value ASAIPsecOverUDPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 35, a)
}

func ASAIPsecOverUDPPort_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 35)
}

func ASABanner2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 36, a)
}

func ASABanner2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 36, a)
}

func ASABanner2_Get(p *radius.Packet) (value []byte) {
	value, _ = ASABanner2_Lookup(p)
	return
}

func ASABanner2_GetString(p *radius.Packet) (value string) {
	value, _ = ASABanner2_LookupString(p)
	return
}

func ASABanner2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASABanner2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASABanner2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASABanner2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASABanner2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 36, a)
}

func ASABanner2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 36, a)
}

func ASABanner2_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 36)
}

type ASAPPTPMPPCCompression uint32

const (
	ASAPPTPMPPCCompression_Value_Disabled ASAPPTPMPPCCompression = 0
	ASAPPTPMPPCCompression_Value_Enabled  ASAPPTPMPPCCompression = 1
)

var ASAPPTPMPPCCompression_Strings = map[ASAPPTPMPPCCompression]string{
	ASAPPTPMPPCCompression_Value_Disabled: "Disabled",
	ASAPPTPMPPCCompression_Value_Enabled:  "Enabled",
}

func (a ASAPPTPMPPCCompression) String() string {
	if str, ok := ASAPPTPMPPCCompression_Strings[a]; ok {
		return str
	}
	return "ASAPPTPMPPCCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAPPTPMPPCCompression_Add(p *radius.Packet, value ASAPPTPMPPCCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 37, a)
}

func ASAPPTPMPPCCompression_Get(p *radius.Packet) (value ASAPPTPMPPCCompression) {
	value, _ = ASAPPTPMPPCCompression_Lookup(p)
	return
}

func ASAPPTPMPPCCompression_Gets(p *radius.Packet) (values []ASAPPTPMPPCCompression, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAPPTPMPPCCompression(i))
	}
	return
}

func ASAPPTPMPPCCompression_Lookup(p *radius.Packet) (value ASAPPTPMPPCCompression, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAPPTPMPPCCompression(i)
	return
}

func ASAPPTPMPPCCompression_Set(p *radius.Packet, value ASAPPTPMPPCCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 37, a)
}

func ASAPPTPMPPCCompression_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 37)
}

type ASAL2TPMPPCCompression uint32

const (
	ASAL2TPMPPCCompression_Value_Disabled ASAL2TPMPPCCompression = 0
	ASAL2TPMPPCCompression_Value_Enabled  ASAL2TPMPPCCompression = 1
)

var ASAL2TPMPPCCompression_Strings = map[ASAL2TPMPPCCompression]string{
	ASAL2TPMPPCCompression_Value_Disabled: "Disabled",
	ASAL2TPMPPCCompression_Value_Enabled:  "Enabled",
}

func (a ASAL2TPMPPCCompression) String() string {
	if str, ok := ASAL2TPMPPCCompression_Strings[a]; ok {
		return str
	}
	return "ASAL2TPMPPCCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAL2TPMPPCCompression_Add(p *radius.Packet, value ASAL2TPMPPCCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 38, a)
}

func ASAL2TPMPPCCompression_Get(p *radius.Packet) (value ASAL2TPMPPCCompression) {
	value, _ = ASAL2TPMPPCCompression_Lookup(p)
	return
}

func ASAL2TPMPPCCompression_Gets(p *radius.Packet) (values []ASAL2TPMPPCCompression, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAL2TPMPPCCompression(i))
	}
	return
}

func ASAL2TPMPPCCompression_Lookup(p *radius.Packet) (value ASAL2TPMPPCCompression, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAL2TPMPPCCompression(i)
	return
}

func ASAL2TPMPPCCompression_Set(p *radius.Packet, value ASAL2TPMPPCCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 38, a)
}

func ASAL2TPMPPCCompression_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 38)
}

type ASAIPsecIPCompression uint32

const (
	ASAIPsecIPCompression_Value_Disabled ASAIPsecIPCompression = 0
	ASAIPsecIPCompression_Value_Enabled  ASAIPsecIPCompression = 1
)

var ASAIPsecIPCompression_Strings = map[ASAIPsecIPCompression]string{
	ASAIPsecIPCompression_Value_Disabled: "Disabled",
	ASAIPsecIPCompression_Value_Enabled:  "Enabled",
}

func (a ASAIPsecIPCompression) String() string {
	if str, ok := ASAIPsecIPCompression_Strings[a]; ok {
		return str
	}
	return "ASAIPsecIPCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecIPCompression_Add(p *radius.Packet, value ASAIPsecIPCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 39, a)
}

func ASAIPsecIPCompression_Get(p *radius.Packet) (value ASAIPsecIPCompression) {
	value, _ = ASAIPsecIPCompression_Lookup(p)
	return
}

func ASAIPsecIPCompression_Gets(p *radius.Packet) (values []ASAIPsecIPCompression, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 39) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecIPCompression(i))
	}
	return
}

func ASAIPsecIPCompression_Lookup(p *radius.Packet) (value ASAIPsecIPCompression, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecIPCompression(i)
	return
}

func ASAIPsecIPCompression_Set(p *radius.Packet, value ASAIPsecIPCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 39, a)
}

func ASAIPsecIPCompression_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 39)
}

type ASAIPsecIKEPeerIDCheck uint32

const (
	ASAIPsecIKEPeerIDCheck_Value_Required                     ASAIPsecIKEPeerIDCheck = 1
	ASAIPsecIKEPeerIDCheck_Value_IfSupportedByPeerCertificate ASAIPsecIKEPeerIDCheck = 2
	ASAIPsecIKEPeerIDCheck_Value_DoNotCheck                   ASAIPsecIKEPeerIDCheck = 3
)

var ASAIPsecIKEPeerIDCheck_Strings = map[ASAIPsecIKEPeerIDCheck]string{
	ASAIPsecIKEPeerIDCheck_Value_Required:                     "Required",
	ASAIPsecIKEPeerIDCheck_Value_IfSupportedByPeerCertificate: "If-Supported-By-Peer-Certificate",
	ASAIPsecIKEPeerIDCheck_Value_DoNotCheck:                   "Do-Not-Check",
}

func (a ASAIPsecIKEPeerIDCheck) String() string {
	if str, ok := ASAIPsecIKEPeerIDCheck_Strings[a]; ok {
		return str
	}
	return "ASAIPsecIKEPeerIDCheck(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecIKEPeerIDCheck_Add(p *radius.Packet, value ASAIPsecIKEPeerIDCheck) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 40, a)
}

func ASAIPsecIKEPeerIDCheck_Get(p *radius.Packet) (value ASAIPsecIKEPeerIDCheck) {
	value, _ = ASAIPsecIKEPeerIDCheck_Lookup(p)
	return
}

func ASAIPsecIKEPeerIDCheck_Gets(p *radius.Packet) (values []ASAIPsecIKEPeerIDCheck, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 40) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecIKEPeerIDCheck(i))
	}
	return
}

func ASAIPsecIKEPeerIDCheck_Lookup(p *radius.Packet) (value ASAIPsecIKEPeerIDCheck, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecIKEPeerIDCheck(i)
	return
}

func ASAIPsecIKEPeerIDCheck_Set(p *radius.Packet, value ASAIPsecIKEPeerIDCheck) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 40, a)
}

func ASAIPsecIKEPeerIDCheck_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 40)
}

type ASAIKEKeepAlives uint32

const (
	ASAIKEKeepAlives_Value_Disabled ASAIKEKeepAlives = 0
	ASAIKEKeepAlives_Value_Enabled  ASAIKEKeepAlives = 1
)

var ASAIKEKeepAlives_Strings = map[ASAIKEKeepAlives]string{
	ASAIKEKeepAlives_Value_Disabled: "Disabled",
	ASAIKEKeepAlives_Value_Enabled:  "Enabled",
}

func (a ASAIKEKeepAlives) String() string {
	if str, ok := ASAIKEKeepAlives_Strings[a]; ok {
		return str
	}
	return "ASAIKEKeepAlives(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIKEKeepAlives_Add(p *radius.Packet, value ASAIKEKeepAlives) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 41, a)
}

func ASAIKEKeepAlives_Get(p *radius.Packet) (value ASAIKEKeepAlives) {
	value, _ = ASAIKEKeepAlives_Lookup(p)
	return
}

func ASAIKEKeepAlives_Gets(p *radius.Packet) (values []ASAIKEKeepAlives, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 41) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIKEKeepAlives(i))
	}
	return
}

func ASAIKEKeepAlives_Lookup(p *radius.Packet) (value ASAIKEKeepAlives, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIKEKeepAlives(i)
	return
}

func ASAIKEKeepAlives_Set(p *radius.Packet, value ASAIKEKeepAlives) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 41, a)
}

func ASAIKEKeepAlives_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 41)
}

type ASAIPsecAuthOnRekey uint32

const (
	ASAIPsecAuthOnRekey_Value_Disabled ASAIPsecAuthOnRekey = 0
	ASAIPsecAuthOnRekey_Value_Enabled  ASAIPsecAuthOnRekey = 1
)

var ASAIPsecAuthOnRekey_Strings = map[ASAIPsecAuthOnRekey]string{
	ASAIPsecAuthOnRekey_Value_Disabled: "Disabled",
	ASAIPsecAuthOnRekey_Value_Enabled:  "Enabled",
}

func (a ASAIPsecAuthOnRekey) String() string {
	if str, ok := ASAIPsecAuthOnRekey_Strings[a]; ok {
		return str
	}
	return "ASAIPsecAuthOnRekey(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecAuthOnRekey_Add(p *radius.Packet, value ASAIPsecAuthOnRekey) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 42, a)
}

func ASAIPsecAuthOnRekey_Get(p *radius.Packet) (value ASAIPsecAuthOnRekey) {
	value, _ = ASAIPsecAuthOnRekey_Lookup(p)
	return
}

func ASAIPsecAuthOnRekey_Gets(p *radius.Packet) (values []ASAIPsecAuthOnRekey, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecAuthOnRekey(i))
	}
	return
}

func ASAIPsecAuthOnRekey_Lookup(p *radius.Packet) (value ASAIPsecAuthOnRekey, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecAuthOnRekey(i)
	return
}

func ASAIPsecAuthOnRekey_Set(p *radius.Packet, value ASAIPsecAuthOnRekey) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 42, a)
}

func ASAIPsecAuthOnRekey_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 42)
}

type ASARequiredClientFirewallVendorCode uint32

const (
	ASARequiredClientFirewallVendorCode_Value_CiscoCIC   ASARequiredClientFirewallVendorCode = 1
	ASARequiredClientFirewallVendorCode_Value_ZoneLabs   ASARequiredClientFirewallVendorCode = 2
	ASARequiredClientFirewallVendorCode_Value_NetworkICE ASARequiredClientFirewallVendorCode = 3
	ASARequiredClientFirewallVendorCode_Value_Sygate     ASARequiredClientFirewallVendorCode = 4
	ASARequiredClientFirewallVendorCode_Value_CiscoIPSA  ASARequiredClientFirewallVendorCode = 5
)

var ASARequiredClientFirewallVendorCode_Strings = map[ASARequiredClientFirewallVendorCode]string{
	ASARequiredClientFirewallVendorCode_Value_CiscoCIC:   "Cisco-CIC",
	ASARequiredClientFirewallVendorCode_Value_ZoneLabs:   "Zone-Labs",
	ASARequiredClientFirewallVendorCode_Value_NetworkICE: "NetworkICE",
	ASARequiredClientFirewallVendorCode_Value_Sygate:     "Sygate",
	ASARequiredClientFirewallVendorCode_Value_CiscoIPSA:  "Cisco-IPSA",
}

func (a ASARequiredClientFirewallVendorCode) String() string {
	if str, ok := ASARequiredClientFirewallVendorCode_Strings[a]; ok {
		return str
	}
	return "ASARequiredClientFirewallVendorCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASARequiredClientFirewallVendorCode_Add(p *radius.Packet, value ASARequiredClientFirewallVendorCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 45, a)
}

func ASARequiredClientFirewallVendorCode_Get(p *radius.Packet) (value ASARequiredClientFirewallVendorCode) {
	value, _ = ASARequiredClientFirewallVendorCode_Lookup(p)
	return
}

func ASARequiredClientFirewallVendorCode_Gets(p *radius.Packet) (values []ASARequiredClientFirewallVendorCode, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 45) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASARequiredClientFirewallVendorCode(i))
	}
	return
}

func ASARequiredClientFirewallVendorCode_Lookup(p *radius.Packet) (value ASARequiredClientFirewallVendorCode, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASARequiredClientFirewallVendorCode(i)
	return
}

func ASARequiredClientFirewallVendorCode_Set(p *radius.Packet, value ASARequiredClientFirewallVendorCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 45, a)
}

func ASARequiredClientFirewallVendorCode_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 45)
}

type ASARequiredClientFirewallProductCode uint32

var ASARequiredClientFirewallProductCode_Strings = map[ASARequiredClientFirewallProductCode]string{}

func (a ASARequiredClientFirewallProductCode) String() string {
	if str, ok := ASARequiredClientFirewallProductCode_Strings[a]; ok {
		return str
	}
	return "ASARequiredClientFirewallProductCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASARequiredClientFirewallProductCode_Add(p *radius.Packet, value ASARequiredClientFirewallProductCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 46, a)
}

func ASARequiredClientFirewallProductCode_Get(p *radius.Packet) (value ASARequiredClientFirewallProductCode) {
	value, _ = ASARequiredClientFirewallProductCode_Lookup(p)
	return
}

func ASARequiredClientFirewallProductCode_Gets(p *radius.Packet) (values []ASARequiredClientFirewallProductCode, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 46) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASARequiredClientFirewallProductCode(i))
	}
	return
}

func ASARequiredClientFirewallProductCode_Lookup(p *radius.Packet) (value ASARequiredClientFirewallProductCode, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASARequiredClientFirewallProductCode(i)
	return
}

func ASARequiredClientFirewallProductCode_Set(p *radius.Packet, value ASARequiredClientFirewallProductCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 46, a)
}

func ASARequiredClientFirewallProductCode_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 46)
}

func ASARequiredClientFirewallDescription_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 47, a)
}

func ASARequiredClientFirewallDescription_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 47, a)
}

func ASARequiredClientFirewallDescription_Get(p *radius.Packet) (value []byte) {
	value, _ = ASARequiredClientFirewallDescription_Lookup(p)
	return
}

func ASARequiredClientFirewallDescription_GetString(p *radius.Packet) (value string) {
	value, _ = ASARequiredClientFirewallDescription_LookupString(p)
	return
}

func ASARequiredClientFirewallDescription_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 47) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASARequiredClientFirewallDescription_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 47) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASARequiredClientFirewallDescription_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASARequiredClientFirewallDescription_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASARequiredClientFirewallDescription_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 47, a)
}

func ASARequiredClientFirewallDescription_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 47, a)
}

func ASARequiredClientFirewallDescription_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 47)
}

type ASARequireHWClientAuth uint32

const (
	ASARequireHWClientAuth_Value_Disabled ASARequireHWClientAuth = 0
	ASARequireHWClientAuth_Value_Enabled  ASARequireHWClientAuth = 1
)

var ASARequireHWClientAuth_Strings = map[ASARequireHWClientAuth]string{
	ASARequireHWClientAuth_Value_Disabled: "Disabled",
	ASARequireHWClientAuth_Value_Enabled:  "Enabled",
}

func (a ASARequireHWClientAuth) String() string {
	if str, ok := ASARequireHWClientAuth_Strings[a]; ok {
		return str
	}
	return "ASARequireHWClientAuth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASARequireHWClientAuth_Add(p *radius.Packet, value ASARequireHWClientAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 48, a)
}

func ASARequireHWClientAuth_Get(p *radius.Packet) (value ASARequireHWClientAuth) {
	value, _ = ASARequireHWClientAuth_Lookup(p)
	return
}

func ASARequireHWClientAuth_Gets(p *radius.Packet) (values []ASARequireHWClientAuth, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 48) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASARequireHWClientAuth(i))
	}
	return
}

func ASARequireHWClientAuth_Lookup(p *radius.Packet) (value ASARequireHWClientAuth, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASARequireHWClientAuth(i)
	return
}

func ASARequireHWClientAuth_Set(p *radius.Packet, value ASARequireHWClientAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 48, a)
}

func ASARequireHWClientAuth_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 48)
}

type ASARequiredIndividualUserAuth uint32

const (
	ASARequiredIndividualUserAuth_Value_Disabled ASARequiredIndividualUserAuth = 0
	ASARequiredIndividualUserAuth_Value_Enabled  ASARequiredIndividualUserAuth = 1
)

var ASARequiredIndividualUserAuth_Strings = map[ASARequiredIndividualUserAuth]string{
	ASARequiredIndividualUserAuth_Value_Disabled: "Disabled",
	ASARequiredIndividualUserAuth_Value_Enabled:  "Enabled",
}

func (a ASARequiredIndividualUserAuth) String() string {
	if str, ok := ASARequiredIndividualUserAuth_Strings[a]; ok {
		return str
	}
	return "ASARequiredIndividualUserAuth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASARequiredIndividualUserAuth_Add(p *radius.Packet, value ASARequiredIndividualUserAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 49, a)
}

func ASARequiredIndividualUserAuth_Get(p *radius.Packet) (value ASARequiredIndividualUserAuth) {
	value, _ = ASARequiredIndividualUserAuth_Lookup(p)
	return
}

func ASARequiredIndividualUserAuth_Gets(p *radius.Packet) (values []ASARequiredIndividualUserAuth, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 49) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASARequiredIndividualUserAuth(i))
	}
	return
}

func ASARequiredIndividualUserAuth_Lookup(p *radius.Packet) (value ASARequiredIndividualUserAuth, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASARequiredIndividualUserAuth(i)
	return
}

func ASARequiredIndividualUserAuth_Set(p *radius.Packet, value ASARequiredIndividualUserAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 49, a)
}

func ASARequiredIndividualUserAuth_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 49)
}

type ASAAuthenticatedUserIdleTimeout uint32

var ASAAuthenticatedUserIdleTimeout_Strings = map[ASAAuthenticatedUserIdleTimeout]string{}

func (a ASAAuthenticatedUserIdleTimeout) String() string {
	if str, ok := ASAAuthenticatedUserIdleTimeout_Strings[a]; ok {
		return str
	}
	return "ASAAuthenticatedUserIdleTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAAuthenticatedUserIdleTimeout_Add(p *radius.Packet, value ASAAuthenticatedUserIdleTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 50, a)
}

func ASAAuthenticatedUserIdleTimeout_Get(p *radius.Packet) (value ASAAuthenticatedUserIdleTimeout) {
	value, _ = ASAAuthenticatedUserIdleTimeout_Lookup(p)
	return
}

func ASAAuthenticatedUserIdleTimeout_Gets(p *radius.Packet) (values []ASAAuthenticatedUserIdleTimeout, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 50) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAAuthenticatedUserIdleTimeout(i))
	}
	return
}

func ASAAuthenticatedUserIdleTimeout_Lookup(p *radius.Packet) (value ASAAuthenticatedUserIdleTimeout, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAAuthenticatedUserIdleTimeout(i)
	return
}

func ASAAuthenticatedUserIdleTimeout_Set(p *radius.Packet, value ASAAuthenticatedUserIdleTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 50, a)
}

func ASAAuthenticatedUserIdleTimeout_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 50)
}

type ASACiscoIPPhoneBypass uint32

const (
	ASACiscoIPPhoneBypass_Value_Disabled ASACiscoIPPhoneBypass = 0
	ASACiscoIPPhoneBypass_Value_Enabled  ASACiscoIPPhoneBypass = 1
)

var ASACiscoIPPhoneBypass_Strings = map[ASACiscoIPPhoneBypass]string{
	ASACiscoIPPhoneBypass_Value_Disabled: "Disabled",
	ASACiscoIPPhoneBypass_Value_Enabled:  "Enabled",
}

func (a ASACiscoIPPhoneBypass) String() string {
	if str, ok := ASACiscoIPPhoneBypass_Strings[a]; ok {
		return str
	}
	return "ASACiscoIPPhoneBypass(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASACiscoIPPhoneBypass_Add(p *radius.Packet, value ASACiscoIPPhoneBypass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 51, a)
}

func ASACiscoIPPhoneBypass_Get(p *radius.Packet) (value ASACiscoIPPhoneBypass) {
	value, _ = ASACiscoIPPhoneBypass_Lookup(p)
	return
}

func ASACiscoIPPhoneBypass_Gets(p *radius.Packet) (values []ASACiscoIPPhoneBypass, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 51) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASACiscoIPPhoneBypass(i))
	}
	return
}

func ASACiscoIPPhoneBypass_Lookup(p *radius.Packet) (value ASACiscoIPPhoneBypass, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASACiscoIPPhoneBypass(i)
	return
}

func ASACiscoIPPhoneBypass_Set(p *radius.Packet, value ASACiscoIPPhoneBypass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 51, a)
}

func ASACiscoIPPhoneBypass_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 51)
}

type ASAIPsecSplitTunnelingPolicy uint32

const (
	ASAIPsecSplitTunnelingPolicy_Value_NoSplitTunneling  ASAIPsecSplitTunnelingPolicy = 0
	ASAIPsecSplitTunnelingPolicy_Value_SplitTunneling    ASAIPsecSplitTunnelingPolicy = 1
	ASAIPsecSplitTunnelingPolicy_Value_LocalLANPermitted ASAIPsecSplitTunnelingPolicy = 2
)

var ASAIPsecSplitTunnelingPolicy_Strings = map[ASAIPsecSplitTunnelingPolicy]string{
	ASAIPsecSplitTunnelingPolicy_Value_NoSplitTunneling:  "No-Split-Tunneling",
	ASAIPsecSplitTunnelingPolicy_Value_SplitTunneling:    "Split-Tunneling",
	ASAIPsecSplitTunnelingPolicy_Value_LocalLANPermitted: "Local-LAN-Permitted",
}

func (a ASAIPsecSplitTunnelingPolicy) String() string {
	if str, ok := ASAIPsecSplitTunnelingPolicy_Strings[a]; ok {
		return str
	}
	return "ASAIPsecSplitTunnelingPolicy(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecSplitTunnelingPolicy_Add(p *radius.Packet, value ASAIPsecSplitTunnelingPolicy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 55, a)
}

func ASAIPsecSplitTunnelingPolicy_Get(p *radius.Packet) (value ASAIPsecSplitTunnelingPolicy) {
	value, _ = ASAIPsecSplitTunnelingPolicy_Lookup(p)
	return
}

func ASAIPsecSplitTunnelingPolicy_Gets(p *radius.Packet) (values []ASAIPsecSplitTunnelingPolicy, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 55) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecSplitTunnelingPolicy(i))
	}
	return
}

func ASAIPsecSplitTunnelingPolicy_Lookup(p *radius.Packet) (value ASAIPsecSplitTunnelingPolicy, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecSplitTunnelingPolicy(i)
	return
}

func ASAIPsecSplitTunnelingPolicy_Set(p *radius.Packet, value ASAIPsecSplitTunnelingPolicy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 55, a)
}

func ASAIPsecSplitTunnelingPolicy_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 55)
}

type ASAIPsecRequiredClientFirewallCapability uint32

const (
	ASAIPsecRequiredClientFirewallCapability_Value_None                  ASAIPsecRequiredClientFirewallCapability = 0
	ASAIPsecRequiredClientFirewallCapability_Value_PolicyRemotelyDefined ASAIPsecRequiredClientFirewallCapability = 1
	ASAIPsecRequiredClientFirewallCapability_Value_PolicyPushed          ASAIPsecRequiredClientFirewallCapability = 2
	ASAIPsecRequiredClientFirewallCapability_Value_PolicyFromServer      ASAIPsecRequiredClientFirewallCapability = 4
)

var ASAIPsecRequiredClientFirewallCapability_Strings = map[ASAIPsecRequiredClientFirewallCapability]string{
	ASAIPsecRequiredClientFirewallCapability_Value_None:                  "None",
	ASAIPsecRequiredClientFirewallCapability_Value_PolicyRemotelyDefined: "Policy-Remotely-Defined",
	ASAIPsecRequiredClientFirewallCapability_Value_PolicyPushed:          "Policy-Pushed",
	ASAIPsecRequiredClientFirewallCapability_Value_PolicyFromServer:      "Policy-from-Server",
}

func (a ASAIPsecRequiredClientFirewallCapability) String() string {
	if str, ok := ASAIPsecRequiredClientFirewallCapability_Strings[a]; ok {
		return str
	}
	return "ASAIPsecRequiredClientFirewallCapability(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecRequiredClientFirewallCapability_Add(p *radius.Packet, value ASAIPsecRequiredClientFirewallCapability) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 56, a)
}

func ASAIPsecRequiredClientFirewallCapability_Get(p *radius.Packet) (value ASAIPsecRequiredClientFirewallCapability) {
	value, _ = ASAIPsecRequiredClientFirewallCapability_Lookup(p)
	return
}

func ASAIPsecRequiredClientFirewallCapability_Gets(p *radius.Packet) (values []ASAIPsecRequiredClientFirewallCapability, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 56) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecRequiredClientFirewallCapability(i))
	}
	return
}

func ASAIPsecRequiredClientFirewallCapability_Lookup(p *radius.Packet) (value ASAIPsecRequiredClientFirewallCapability, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecRequiredClientFirewallCapability(i)
	return
}

func ASAIPsecRequiredClientFirewallCapability_Set(p *radius.Packet, value ASAIPsecRequiredClientFirewallCapability) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 56, a)
}

func ASAIPsecRequiredClientFirewallCapability_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 56)
}

func ASAIPsecClientFirewallFilterName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 57, a)
}

func ASAIPsecClientFirewallFilterName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 57, a)
}

func ASAIPsecClientFirewallFilterName_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIPsecClientFirewallFilterName_Lookup(p)
	return
}

func ASAIPsecClientFirewallFilterName_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIPsecClientFirewallFilterName_LookupString(p)
	return
}

func ASAIPsecClientFirewallFilterName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 57) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecClientFirewallFilterName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 57) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecClientFirewallFilterName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIPsecClientFirewallFilterName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIPsecClientFirewallFilterName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 57, a)
}

func ASAIPsecClientFirewallFilterName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 57, a)
}

func ASAIPsecClientFirewallFilterName_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 57)
}

type ASAIPsecClientFirewallFilterOptional uint32

const (
	ASAIPsecClientFirewallFilterOptional_Value_Required ASAIPsecClientFirewallFilterOptional = 0
	ASAIPsecClientFirewallFilterOptional_Value_Optional ASAIPsecClientFirewallFilterOptional = 1
)

var ASAIPsecClientFirewallFilterOptional_Strings = map[ASAIPsecClientFirewallFilterOptional]string{
	ASAIPsecClientFirewallFilterOptional_Value_Required: "Required",
	ASAIPsecClientFirewallFilterOptional_Value_Optional: "Optional",
}

func (a ASAIPsecClientFirewallFilterOptional) String() string {
	if str, ok := ASAIPsecClientFirewallFilterOptional_Strings[a]; ok {
		return str
	}
	return "ASAIPsecClientFirewallFilterOptional(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecClientFirewallFilterOptional_Add(p *radius.Packet, value ASAIPsecClientFirewallFilterOptional) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 58, a)
}

func ASAIPsecClientFirewallFilterOptional_Get(p *radius.Packet) (value ASAIPsecClientFirewallFilterOptional) {
	value, _ = ASAIPsecClientFirewallFilterOptional_Lookup(p)
	return
}

func ASAIPsecClientFirewallFilterOptional_Gets(p *radius.Packet) (values []ASAIPsecClientFirewallFilterOptional, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 58) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecClientFirewallFilterOptional(i))
	}
	return
}

func ASAIPsecClientFirewallFilterOptional_Lookup(p *radius.Packet) (value ASAIPsecClientFirewallFilterOptional, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecClientFirewallFilterOptional(i)
	return
}

func ASAIPsecClientFirewallFilterOptional_Set(p *radius.Packet, value ASAIPsecClientFirewallFilterOptional) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 58, a)
}

func ASAIPsecClientFirewallFilterOptional_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 58)
}

type ASAIPsecBackupServers uint32

const (
	ASAIPsecBackupServers_Value_UseClientConfiguredList   ASAIPsecBackupServers = 1
	ASAIPsecBackupServers_Value_DisableAndClearClientList ASAIPsecBackupServers = 2
	ASAIPsecBackupServers_Value_UseBackupServerList       ASAIPsecBackupServers = 3
)

var ASAIPsecBackupServers_Strings = map[ASAIPsecBackupServers]string{
	ASAIPsecBackupServers_Value_UseClientConfiguredList:   "Use-Client-Configured-List",
	ASAIPsecBackupServers_Value_DisableAndClearClientList: "Disable-and-clear-client-list",
	ASAIPsecBackupServers_Value_UseBackupServerList:       "Use-Backup-Server-List",
}

func (a ASAIPsecBackupServers) String() string {
	if str, ok := ASAIPsecBackupServers_Strings[a]; ok {
		return str
	}
	return "ASAIPsecBackupServers(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIPsecBackupServers_Add(p *radius.Packet, value ASAIPsecBackupServers) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 59, a)
}

func ASAIPsecBackupServers_Get(p *radius.Packet) (value ASAIPsecBackupServers) {
	value, _ = ASAIPsecBackupServers_Lookup(p)
	return
}

func ASAIPsecBackupServers_Gets(p *radius.Packet) (values []ASAIPsecBackupServers, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 59) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIPsecBackupServers(i))
	}
	return
}

func ASAIPsecBackupServers_Lookup(p *radius.Packet) (value ASAIPsecBackupServers, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIPsecBackupServers(i)
	return
}

func ASAIPsecBackupServers_Set(p *radius.Packet, value ASAIPsecBackupServers) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 59, a)
}

func ASAIPsecBackupServers_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 59)
}

func ASAIPsecBackupServerList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 60, a)
}

func ASAIPsecBackupServerList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 60, a)
}

func ASAIPsecBackupServerList_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIPsecBackupServerList_Lookup(p)
	return
}

func ASAIPsecBackupServerList_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIPsecBackupServerList_LookupString(p)
	return
}

func ASAIPsecBackupServerList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecBackupServerList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPsecBackupServerList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIPsecBackupServerList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIPsecBackupServerList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 60, a)
}

func ASAIPsecBackupServerList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 60, a)
}

func ASAIPsecBackupServerList_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 60)
}

func ASADHCPNetworkScope_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 61, a)
}

func ASADHCPNetworkScope_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 61, a)
}

func ASADHCPNetworkScope_Get(p *radius.Packet) (value []byte) {
	value, _ = ASADHCPNetworkScope_Lookup(p)
	return
}

func ASADHCPNetworkScope_GetString(p *radius.Packet) (value string) {
	value, _ = ASADHCPNetworkScope_LookupString(p)
	return
}

func ASADHCPNetworkScope_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 61) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASADHCPNetworkScope_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 61) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASADHCPNetworkScope_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASADHCPNetworkScope_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASADHCPNetworkScope_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 61, a)
}

func ASADHCPNetworkScope_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 61, a)
}

func ASADHCPNetworkScope_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 61)
}

type ASAInterceptDHCPConfigureMsg uint32

const (
	ASAInterceptDHCPConfigureMsg_Value_Disabled ASAInterceptDHCPConfigureMsg = 0
	ASAInterceptDHCPConfigureMsg_Value_Enabled  ASAInterceptDHCPConfigureMsg = 1
)

var ASAInterceptDHCPConfigureMsg_Strings = map[ASAInterceptDHCPConfigureMsg]string{
	ASAInterceptDHCPConfigureMsg_Value_Disabled: "Disabled",
	ASAInterceptDHCPConfigureMsg_Value_Enabled:  "Enabled",
}

func (a ASAInterceptDHCPConfigureMsg) String() string {
	if str, ok := ASAInterceptDHCPConfigureMsg_Strings[a]; ok {
		return str
	}
	return "ASAInterceptDHCPConfigureMsg(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAInterceptDHCPConfigureMsg_Add(p *radius.Packet, value ASAInterceptDHCPConfigureMsg) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 62, a)
}

func ASAInterceptDHCPConfigureMsg_Get(p *radius.Packet) (value ASAInterceptDHCPConfigureMsg) {
	value, _ = ASAInterceptDHCPConfigureMsg_Lookup(p)
	return
}

func ASAInterceptDHCPConfigureMsg_Gets(p *radius.Packet) (values []ASAInterceptDHCPConfigureMsg, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAInterceptDHCPConfigureMsg(i))
	}
	return
}

func ASAInterceptDHCPConfigureMsg_Lookup(p *radius.Packet) (value ASAInterceptDHCPConfigureMsg, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAInterceptDHCPConfigureMsg(i)
	return
}

func ASAInterceptDHCPConfigureMsg_Set(p *radius.Packet, value ASAInterceptDHCPConfigureMsg) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 62, a)
}

func ASAInterceptDHCPConfigureMsg_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 62)
}

type ASAMSClientSubnetMask uint32

var ASAMSClientSubnetMask_Strings = map[ASAMSClientSubnetMask]string{}

func (a ASAMSClientSubnetMask) String() string {
	if str, ok := ASAMSClientSubnetMask_Strings[a]; ok {
		return str
	}
	return "ASAMSClientSubnetMask(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAMSClientSubnetMask_Add(p *radius.Packet, value ASAMSClientSubnetMask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 63, a)
}

func ASAMSClientSubnetMask_Get(p *radius.Packet) (value ASAMSClientSubnetMask) {
	value, _ = ASAMSClientSubnetMask_Lookup(p)
	return
}

func ASAMSClientSubnetMask_Gets(p *radius.Packet) (values []ASAMSClientSubnetMask, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 63) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAMSClientSubnetMask(i))
	}
	return
}

func ASAMSClientSubnetMask_Lookup(p *radius.Packet) (value ASAMSClientSubnetMask, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAMSClientSubnetMask(i)
	return
}

func ASAMSClientSubnetMask_Set(p *radius.Packet, value ASAMSClientSubnetMask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 63, a)
}

func ASAMSClientSubnetMask_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 63)
}

type ASAAllowNetworkExtensionMode uint32

const (
	ASAAllowNetworkExtensionMode_Value_Disabled ASAAllowNetworkExtensionMode = 0
	ASAAllowNetworkExtensionMode_Value_Enabled  ASAAllowNetworkExtensionMode = 1
)

var ASAAllowNetworkExtensionMode_Strings = map[ASAAllowNetworkExtensionMode]string{
	ASAAllowNetworkExtensionMode_Value_Disabled: "Disabled",
	ASAAllowNetworkExtensionMode_Value_Enabled:  "Enabled",
}

func (a ASAAllowNetworkExtensionMode) String() string {
	if str, ok := ASAAllowNetworkExtensionMode_Strings[a]; ok {
		return str
	}
	return "ASAAllowNetworkExtensionMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAAllowNetworkExtensionMode_Add(p *radius.Packet, value ASAAllowNetworkExtensionMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 64, a)
}

func ASAAllowNetworkExtensionMode_Get(p *radius.Packet) (value ASAAllowNetworkExtensionMode) {
	value, _ = ASAAllowNetworkExtensionMode_Lookup(p)
	return
}

func ASAAllowNetworkExtensionMode_Gets(p *radius.Packet) (values []ASAAllowNetworkExtensionMode, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAAllowNetworkExtensionMode(i))
	}
	return
}

func ASAAllowNetworkExtensionMode_Lookup(p *radius.Packet) (value ASAAllowNetworkExtensionMode, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAAllowNetworkExtensionMode(i)
	return
}

func ASAAllowNetworkExtensionMode_Set(p *radius.Packet, value ASAAllowNetworkExtensionMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 64, a)
}

func ASAAllowNetworkExtensionMode_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 64)
}

type ASAAuthorizationType uint32

const (
	ASAAuthorizationType_Value_None   ASAAuthorizationType = 0
	ASAAuthorizationType_Value_Radius ASAAuthorizationType = 1
	ASAAuthorizationType_Value_LDAP   ASAAuthorizationType = 2
)

var ASAAuthorizationType_Strings = map[ASAAuthorizationType]string{
	ASAAuthorizationType_Value_None:   "None",
	ASAAuthorizationType_Value_Radius: "Radius",
	ASAAuthorizationType_Value_LDAP:   "LDAP",
}

func (a ASAAuthorizationType) String() string {
	if str, ok := ASAAuthorizationType_Strings[a]; ok {
		return str
	}
	return "ASAAuthorizationType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAAuthorizationType_Add(p *radius.Packet, value ASAAuthorizationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 65, a)
}

func ASAAuthorizationType_Get(p *radius.Packet) (value ASAAuthorizationType) {
	value, _ = ASAAuthorizationType_Lookup(p)
	return
}

func ASAAuthorizationType_Gets(p *radius.Packet) (values []ASAAuthorizationType, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 65) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAAuthorizationType(i))
	}
	return
}

func ASAAuthorizationType_Lookup(p *radius.Packet) (value ASAAuthorizationType, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAAuthorizationType(i)
	return
}

func ASAAuthorizationType_Set(p *radius.Packet, value ASAAuthorizationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 65, a)
}

func ASAAuthorizationType_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 65)
}

type ASAAuthorizationRequired uint32

const (
	ASAAuthorizationRequired_Value_No  ASAAuthorizationRequired = 0
	ASAAuthorizationRequired_Value_Yes ASAAuthorizationRequired = 1
)

var ASAAuthorizationRequired_Strings = map[ASAAuthorizationRequired]string{
	ASAAuthorizationRequired_Value_No:  "No",
	ASAAuthorizationRequired_Value_Yes: "Yes",
}

func (a ASAAuthorizationRequired) String() string {
	if str, ok := ASAAuthorizationRequired_Strings[a]; ok {
		return str
	}
	return "ASAAuthorizationRequired(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAAuthorizationRequired_Add(p *radius.Packet, value ASAAuthorizationRequired) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 66, a)
}

func ASAAuthorizationRequired_Get(p *radius.Packet) (value ASAAuthorizationRequired) {
	value, _ = ASAAuthorizationRequired_Lookup(p)
	return
}

func ASAAuthorizationRequired_Gets(p *radius.Packet) (values []ASAAuthorizationRequired, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 66) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAAuthorizationRequired(i))
	}
	return
}

func ASAAuthorizationRequired_Lookup(p *radius.Packet) (value ASAAuthorizationRequired, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAAuthorizationRequired(i)
	return
}

func ASAAuthorizationRequired_Set(p *radius.Packet, value ASAAuthorizationRequired) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 66, a)
}

func ASAAuthorizationRequired_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 66)
}

func ASAAuthorizationDNField_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 67, a)
}

func ASAAuthorizationDNField_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 67, a)
}

func ASAAuthorizationDNField_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAAuthorizationDNField_Lookup(p)
	return
}

func ASAAuthorizationDNField_GetString(p *radius.Packet) (value string) {
	value, _ = ASAAuthorizationDNField_LookupString(p)
	return
}

func ASAAuthorizationDNField_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 67) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAAuthorizationDNField_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 67) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAAuthorizationDNField_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAAuthorizationDNField_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAAuthorizationDNField_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 67, a)
}

func ASAAuthorizationDNField_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 67, a)
}

func ASAAuthorizationDNField_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 67)
}

type ASAIKEKeepAliveConfidenceInterval uint32

var ASAIKEKeepAliveConfidenceInterval_Strings = map[ASAIKEKeepAliveConfidenceInterval]string{}

func (a ASAIKEKeepAliveConfidenceInterval) String() string {
	if str, ok := ASAIKEKeepAliveConfidenceInterval_Strings[a]; ok {
		return str
	}
	return "ASAIKEKeepAliveConfidenceInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIKEKeepAliveConfidenceInterval_Add(p *radius.Packet, value ASAIKEKeepAliveConfidenceInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 68, a)
}

func ASAIKEKeepAliveConfidenceInterval_Get(p *radius.Packet) (value ASAIKEKeepAliveConfidenceInterval) {
	value, _ = ASAIKEKeepAliveConfidenceInterval_Lookup(p)
	return
}

func ASAIKEKeepAliveConfidenceInterval_Gets(p *radius.Packet) (values []ASAIKEKeepAliveConfidenceInterval, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 68) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIKEKeepAliveConfidenceInterval(i))
	}
	return
}

func ASAIKEKeepAliveConfidenceInterval_Lookup(p *radius.Packet) (value ASAIKEKeepAliveConfidenceInterval, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIKEKeepAliveConfidenceInterval(i)
	return
}

func ASAIKEKeepAliveConfidenceInterval_Set(p *radius.Packet, value ASAIKEKeepAliveConfidenceInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 68, a)
}

func ASAIKEKeepAliveConfidenceInterval_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 68)
}

type ASAWebVPNContentFilterParameters uint32

var ASAWebVPNContentFilterParameters_Strings = map[ASAWebVPNContentFilterParameters]string{}

func (a ASAWebVPNContentFilterParameters) String() string {
	if str, ok := ASAWebVPNContentFilterParameters_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNContentFilterParameters(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNContentFilterParameters_Add(p *radius.Packet, value ASAWebVPNContentFilterParameters) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 69, a)
}

func ASAWebVPNContentFilterParameters_Get(p *radius.Packet) (value ASAWebVPNContentFilterParameters) {
	value, _ = ASAWebVPNContentFilterParameters_Lookup(p)
	return
}

func ASAWebVPNContentFilterParameters_Gets(p *radius.Packet) (values []ASAWebVPNContentFilterParameters, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 69) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNContentFilterParameters(i))
	}
	return
}

func ASAWebVPNContentFilterParameters_Lookup(p *radius.Packet) (value ASAWebVPNContentFilterParameters, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNContentFilterParameters(i)
	return
}

func ASAWebVPNContentFilterParameters_Set(p *radius.Packet, value ASAWebVPNContentFilterParameters) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 69, a)
}

func ASAWebVPNContentFilterParameters_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 69)
}

type ASAWebVPNHTMLFilter uint32

var ASAWebVPNHTMLFilter_Strings = map[ASAWebVPNHTMLFilter]string{}

func (a ASAWebVPNHTMLFilter) String() string {
	if str, ok := ASAWebVPNHTMLFilter_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNHTMLFilter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNHTMLFilter_Add(p *radius.Packet, value ASAWebVPNHTMLFilter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 69, a)
}

func ASAWebVPNHTMLFilter_Get(p *radius.Packet) (value ASAWebVPNHTMLFilter) {
	value, _ = ASAWebVPNHTMLFilter_Lookup(p)
	return
}

func ASAWebVPNHTMLFilter_Gets(p *radius.Packet) (values []ASAWebVPNHTMLFilter, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 69) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNHTMLFilter(i))
	}
	return
}

func ASAWebVPNHTMLFilter_Lookup(p *radius.Packet) (value ASAWebVPNHTMLFilter, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNHTMLFilter(i)
	return
}

func ASAWebVPNHTMLFilter_Set(p *radius.Packet, value ASAWebVPNHTMLFilter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 69, a)
}

func ASAWebVPNHTMLFilter_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 69)
}

func ASAWebVPNURLList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 71, a)
}

func ASAWebVPNURLList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 71, a)
}

func ASAWebVPNURLList_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNURLList_Lookup(p)
	return
}

func ASAWebVPNURLList_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNURLList_LookupString(p)
	return
}

func ASAWebVPNURLList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 71) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNURLList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 71) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNURLList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNURLList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNURLList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 71, a)
}

func ASAWebVPNURLList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 71, a)
}

func ASAWebVPNURLList_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 71)
}

func ASAWebVPNPortForwardingList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 72, a)
}

func ASAWebVPNPortForwardingList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 72, a)
}

func ASAWebVPNPortForwardingList_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNPortForwardingList_Lookup(p)
	return
}

func ASAWebVPNPortForwardingList_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNPortForwardingList_LookupString(p)
	return
}

func ASAWebVPNPortForwardingList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 72) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNPortForwardingList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 72) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNPortForwardingList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNPortForwardingList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNPortForwardingList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 72, a)
}

func ASAWebVPNPortForwardingList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 72, a)
}

func ASAWebVPNPortForwardingList_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 72)
}

func ASAWebVPNAccessList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 73, a)
}

func ASAWebVPNAccessList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 73, a)
}

func ASAWebVPNAccessList_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNAccessList_Lookup(p)
	return
}

func ASAWebVPNAccessList_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNAccessList_LookupString(p)
	return
}

func ASAWebVPNAccessList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 73) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNAccessList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 73) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNAccessList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNAccessList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNAccessList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 73, a)
}

func ASAWebVPNAccessList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 73, a)
}

func ASAWebVPNAccessList_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 73)
}

func ASAWebVPNACL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 73, a)
}

func ASAWebVPNACL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 73, a)
}

func ASAWebVPNACL_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNACL_Lookup(p)
	return
}

func ASAWebVPNACL_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNACL_LookupString(p)
	return
}

func ASAWebVPNACL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 73) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNACL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 73) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNACL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNACL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNACL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 73, a)
}

func ASAWebVPNACL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 73, a)
}

func ASAWebVPNACL_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 73)
}

func ASAWebVPNHTTPProxyIPAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 74, a)
}

func ASAWebVPNHTTPProxyIPAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 74, a)
}

func ASAWebVPNHTTPProxyIPAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNHTTPProxyIPAddress_Lookup(p)
	return
}

func ASAWebVPNHTTPProxyIPAddress_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNHTTPProxyIPAddress_LookupString(p)
	return
}

func ASAWebVPNHTTPProxyIPAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 74) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNHTTPProxyIPAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 74) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNHTTPProxyIPAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNHTTPProxyIPAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNHTTPProxyIPAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 74, a)
}

func ASAWebVPNHTTPProxyIPAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 74, a)
}

func ASAWebVPNHTTPProxyIPAddress_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 74)
}

type ASACiscoLEAPBypass uint32

const (
	ASACiscoLEAPBypass_Value_Disabled ASACiscoLEAPBypass = 0
	ASACiscoLEAPBypass_Value_Enabled  ASACiscoLEAPBypass = 1
)

var ASACiscoLEAPBypass_Strings = map[ASACiscoLEAPBypass]string{
	ASACiscoLEAPBypass_Value_Disabled: "Disabled",
	ASACiscoLEAPBypass_Value_Enabled:  "Enabled",
}

func (a ASACiscoLEAPBypass) String() string {
	if str, ok := ASACiscoLEAPBypass_Strings[a]; ok {
		return str
	}
	return "ASACiscoLEAPBypass(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASACiscoLEAPBypass_Add(p *radius.Packet, value ASACiscoLEAPBypass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 75, a)
}

func ASACiscoLEAPBypass_Get(p *radius.Packet) (value ASACiscoLEAPBypass) {
	value, _ = ASACiscoLEAPBypass_Lookup(p)
	return
}

func ASACiscoLEAPBypass_Gets(p *radius.Packet) (values []ASACiscoLEAPBypass, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 75) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASACiscoLEAPBypass(i))
	}
	return
}

func ASACiscoLEAPBypass_Lookup(p *radius.Packet) (value ASACiscoLEAPBypass, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASACiscoLEAPBypass(i)
	return
}

func ASACiscoLEAPBypass_Set(p *radius.Packet, value ASACiscoLEAPBypass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 75, a)
}

func ASACiscoLEAPBypass_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 75)
}

func ASAWebVPNDefaultHomepage_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 76, a)
}

func ASAWebVPNDefaultHomepage_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 76, a)
}

func ASAWebVPNDefaultHomepage_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNDefaultHomepage_Lookup(p)
	return
}

func ASAWebVPNDefaultHomepage_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNDefaultHomepage_LookupString(p)
	return
}

func ASAWebVPNDefaultHomepage_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 76) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNDefaultHomepage_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 76) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNDefaultHomepage_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNDefaultHomepage_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNDefaultHomepage_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 76, a)
}

func ASAWebVPNDefaultHomepage_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 76, a)
}

func ASAWebVPNDefaultHomepage_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 76)
}

func ASAClientTypeVersionLimiting_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 77, a)
}

func ASAClientTypeVersionLimiting_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 77, a)
}

func ASAClientTypeVersionLimiting_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAClientTypeVersionLimiting_Lookup(p)
	return
}

func ASAClientTypeVersionLimiting_GetString(p *radius.Packet) (value string) {
	value, _ = ASAClientTypeVersionLimiting_LookupString(p)
	return
}

func ASAClientTypeVersionLimiting_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 77) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAClientTypeVersionLimiting_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 77) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAClientTypeVersionLimiting_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAClientTypeVersionLimiting_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAClientTypeVersionLimiting_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 77, a)
}

func ASAClientTypeVersionLimiting_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 77, a)
}

func ASAClientTypeVersionLimiting_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 77)
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 78, a)
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 78, a)
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_Lookup(p)
	return
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_LookupString(p)
	return
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 78) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 78) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 78, a)
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 78, a)
}

func ASAWebVPNGroupBasedHTTPHTTPSProxyExceptionList_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 78)
}

func ASAWebVPNPortForwardingName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 79, a)
}

func ASAWebVPNPortForwardingName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 79, a)
}

func ASAWebVPNPortForwardingName_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNPortForwardingName_Lookup(p)
	return
}

func ASAWebVPNPortForwardingName_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNPortForwardingName_LookupString(p)
	return
}

func ASAWebVPNPortForwardingName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 79) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNPortForwardingName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 79) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNPortForwardingName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNPortForwardingName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNPortForwardingName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 79, a)
}

func ASAWebVPNPortForwardingName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 79, a)
}

func ASAWebVPNPortForwardingName_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 79)
}

func ASAIEProxyServer_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 80, a)
}

func ASAIEProxyServer_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 80, a)
}

func ASAIEProxyServer_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIEProxyServer_Lookup(p)
	return
}

func ASAIEProxyServer_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIEProxyServer_LookupString(p)
	return
}

func ASAIEProxyServer_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 80) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIEProxyServer_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 80) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIEProxyServer_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIEProxyServer_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIEProxyServer_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 80, a)
}

func ASAIEProxyServer_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 80, a)
}

func ASAIEProxyServer_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 80)
}

type ASAIEProxyServerPolicy uint32

const (
	ASAIEProxyServerPolicy_Value_NoModify               ASAIEProxyServerPolicy = 1
	ASAIEProxyServerPolicy_Value_NoProxy                ASAIEProxyServerPolicy = 2
	ASAIEProxyServerPolicy_Value_AutoDetect             ASAIEProxyServerPolicy = 3
	ASAIEProxyServerPolicy_Value_UseConcentratorSetting ASAIEProxyServerPolicy = 4
)

var ASAIEProxyServerPolicy_Strings = map[ASAIEProxyServerPolicy]string{
	ASAIEProxyServerPolicy_Value_NoModify:               "No-Modify",
	ASAIEProxyServerPolicy_Value_NoProxy:                "No-Proxy",
	ASAIEProxyServerPolicy_Value_AutoDetect:             "Auto-detect",
	ASAIEProxyServerPolicy_Value_UseConcentratorSetting: "Use-Concentrator-Setting",
}

func (a ASAIEProxyServerPolicy) String() string {
	if str, ok := ASAIEProxyServerPolicy_Strings[a]; ok {
		return str
	}
	return "ASAIEProxyServerPolicy(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIEProxyServerPolicy_Add(p *radius.Packet, value ASAIEProxyServerPolicy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 81, a)
}

func ASAIEProxyServerPolicy_Get(p *radius.Packet) (value ASAIEProxyServerPolicy) {
	value, _ = ASAIEProxyServerPolicy_Lookup(p)
	return
}

func ASAIEProxyServerPolicy_Gets(p *radius.Packet) (values []ASAIEProxyServerPolicy, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 81) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIEProxyServerPolicy(i))
	}
	return
}

func ASAIEProxyServerPolicy_Lookup(p *radius.Packet) (value ASAIEProxyServerPolicy, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIEProxyServerPolicy(i)
	return
}

func ASAIEProxyServerPolicy_Set(p *radius.Packet, value ASAIEProxyServerPolicy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 81, a)
}

func ASAIEProxyServerPolicy_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 81)
}

func ASAIEProxyExceptionList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 82, a)
}

func ASAIEProxyExceptionList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 82, a)
}

func ASAIEProxyExceptionList_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIEProxyExceptionList_Lookup(p)
	return
}

func ASAIEProxyExceptionList_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIEProxyExceptionList_LookupString(p)
	return
}

func ASAIEProxyExceptionList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 82) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIEProxyExceptionList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 82) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIEProxyExceptionList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIEProxyExceptionList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIEProxyExceptionList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 82, a)
}

func ASAIEProxyExceptionList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 82, a)
}

func ASAIEProxyExceptionList_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 82)
}

type ASAIEProxyBypassLocal uint32

const (
	ASAIEProxyBypassLocal_Value_None  ASAIEProxyBypassLocal = 0
	ASAIEProxyBypassLocal_Value_Local ASAIEProxyBypassLocal = 1
)

var ASAIEProxyBypassLocal_Strings = map[ASAIEProxyBypassLocal]string{
	ASAIEProxyBypassLocal_Value_None:  "None",
	ASAIEProxyBypassLocal_Value_Local: "Local",
}

func (a ASAIEProxyBypassLocal) String() string {
	if str, ok := ASAIEProxyBypassLocal_Strings[a]; ok {
		return str
	}
	return "ASAIEProxyBypassLocal(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIEProxyBypassLocal_Add(p *radius.Packet, value ASAIEProxyBypassLocal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 83, a)
}

func ASAIEProxyBypassLocal_Get(p *radius.Packet) (value ASAIEProxyBypassLocal) {
	value, _ = ASAIEProxyBypassLocal_Lookup(p)
	return
}

func ASAIEProxyBypassLocal_Gets(p *radius.Packet) (values []ASAIEProxyBypassLocal, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 83) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIEProxyBypassLocal(i))
	}
	return
}

func ASAIEProxyBypassLocal_Lookup(p *radius.Packet) (value ASAIEProxyBypassLocal, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIEProxyBypassLocal(i)
	return
}

func ASAIEProxyBypassLocal_Set(p *radius.Packet, value ASAIEProxyBypassLocal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 83, a)
}

func ASAIEProxyBypassLocal_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 83)
}

type ASAIKEKeepaliveRetryInterval uint32

var ASAIKEKeepaliveRetryInterval_Strings = map[ASAIKEKeepaliveRetryInterval]string{}

func (a ASAIKEKeepaliveRetryInterval) String() string {
	if str, ok := ASAIKEKeepaliveRetryInterval_Strings[a]; ok {
		return str
	}
	return "ASAIKEKeepaliveRetryInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAIKEKeepaliveRetryInterval_Add(p *radius.Packet, value ASAIKEKeepaliveRetryInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 84, a)
}

func ASAIKEKeepaliveRetryInterval_Get(p *radius.Packet) (value ASAIKEKeepaliveRetryInterval) {
	value, _ = ASAIKEKeepaliveRetryInterval_Lookup(p)
	return
}

func ASAIKEKeepaliveRetryInterval_Gets(p *radius.Packet) (values []ASAIKEKeepaliveRetryInterval, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 84) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAIKEKeepaliveRetryInterval(i))
	}
	return
}

func ASAIKEKeepaliveRetryInterval_Lookup(p *radius.Packet) (value ASAIKEKeepaliveRetryInterval, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAIKEKeepaliveRetryInterval(i)
	return
}

func ASAIKEKeepaliveRetryInterval_Set(p *radius.Packet, value ASAIKEKeepaliveRetryInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 84, a)
}

func ASAIKEKeepaliveRetryInterval_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 84)
}

func ASATunnelGroupLock_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 85, a)
}

func ASATunnelGroupLock_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 85, a)
}

func ASATunnelGroupLock_Get(p *radius.Packet) (value []byte) {
	value, _ = ASATunnelGroupLock_Lookup(p)
	return
}

func ASATunnelGroupLock_GetString(p *radius.Packet) (value string) {
	value, _ = ASATunnelGroupLock_LookupString(p)
	return
}

func ASATunnelGroupLock_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 85) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASATunnelGroupLock_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 85) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASATunnelGroupLock_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASATunnelGroupLock_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASATunnelGroupLock_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 85, a)
}

func ASATunnelGroupLock_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 85, a)
}

func ASATunnelGroupLock_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 85)
}

func ASAAccessListInbound_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 86, a)
}

func ASAAccessListInbound_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 86, a)
}

func ASAAccessListInbound_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAAccessListInbound_Lookup(p)
	return
}

func ASAAccessListInbound_GetString(p *radius.Packet) (value string) {
	value, _ = ASAAccessListInbound_LookupString(p)
	return
}

func ASAAccessListInbound_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 86) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAAccessListInbound_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 86) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAAccessListInbound_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAAccessListInbound_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAAccessListInbound_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 86, a)
}

func ASAAccessListInbound_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 86, a)
}

func ASAAccessListInbound_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 86)
}

func ASAAccessListOutbound_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 87, a)
}

func ASAAccessListOutbound_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 87, a)
}

func ASAAccessListOutbound_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAAccessListOutbound_Lookup(p)
	return
}

func ASAAccessListOutbound_GetString(p *radius.Packet) (value string) {
	value, _ = ASAAccessListOutbound_LookupString(p)
	return
}

func ASAAccessListOutbound_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 87) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAAccessListOutbound_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 87) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAAccessListOutbound_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAAccessListOutbound_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAAccessListOutbound_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 87, a)
}

func ASAAccessListOutbound_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 87, a)
}

func ASAAccessListOutbound_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 87)
}

type ASAPerfectForwardSecrecyEnable uint32

const (
	ASAPerfectForwardSecrecyEnable_Value_No  ASAPerfectForwardSecrecyEnable = 0
	ASAPerfectForwardSecrecyEnable_Value_Yes ASAPerfectForwardSecrecyEnable = 1
)

var ASAPerfectForwardSecrecyEnable_Strings = map[ASAPerfectForwardSecrecyEnable]string{
	ASAPerfectForwardSecrecyEnable_Value_No:  "No",
	ASAPerfectForwardSecrecyEnable_Value_Yes: "Yes",
}

func (a ASAPerfectForwardSecrecyEnable) String() string {
	if str, ok := ASAPerfectForwardSecrecyEnable_Strings[a]; ok {
		return str
	}
	return "ASAPerfectForwardSecrecyEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAPerfectForwardSecrecyEnable_Add(p *radius.Packet, value ASAPerfectForwardSecrecyEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 88, a)
}

func ASAPerfectForwardSecrecyEnable_Get(p *radius.Packet) (value ASAPerfectForwardSecrecyEnable) {
	value, _ = ASAPerfectForwardSecrecyEnable_Lookup(p)
	return
}

func ASAPerfectForwardSecrecyEnable_Gets(p *radius.Packet) (values []ASAPerfectForwardSecrecyEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 88) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAPerfectForwardSecrecyEnable(i))
	}
	return
}

func ASAPerfectForwardSecrecyEnable_Lookup(p *radius.Packet) (value ASAPerfectForwardSecrecyEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAPerfectForwardSecrecyEnable(i)
	return
}

func ASAPerfectForwardSecrecyEnable_Set(p *radius.Packet, value ASAPerfectForwardSecrecyEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 88, a)
}

func ASAPerfectForwardSecrecyEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 88)
}

type ASANACEnable uint32

const (
	ASANACEnable_Value_No  ASANACEnable = 0
	ASANACEnable_Value_Yes ASANACEnable = 1
)

var ASANACEnable_Strings = map[ASANACEnable]string{
	ASANACEnable_Value_No:  "No",
	ASANACEnable_Value_Yes: "Yes",
}

func (a ASANACEnable) String() string {
	if str, ok := ASANACEnable_Strings[a]; ok {
		return str
	}
	return "ASANACEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASANACEnable_Add(p *radius.Packet, value ASANACEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 89, a)
}

func ASANACEnable_Get(p *radius.Packet) (value ASANACEnable) {
	value, _ = ASANACEnable_Lookup(p)
	return
}

func ASANACEnable_Gets(p *radius.Packet) (values []ASANACEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 89) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASANACEnable(i))
	}
	return
}

func ASANACEnable_Lookup(p *radius.Packet) (value ASANACEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASANACEnable(i)
	return
}

func ASANACEnable_Set(p *radius.Packet, value ASANACEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 89, a)
}

func ASANACEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 89)
}

type ASANACStatusQueryTimer uint32

var ASANACStatusQueryTimer_Strings = map[ASANACStatusQueryTimer]string{}

func (a ASANACStatusQueryTimer) String() string {
	if str, ok := ASANACStatusQueryTimer_Strings[a]; ok {
		return str
	}
	return "ASANACStatusQueryTimer(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASANACStatusQueryTimer_Add(p *radius.Packet, value ASANACStatusQueryTimer) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 90, a)
}

func ASANACStatusQueryTimer_Get(p *radius.Packet) (value ASANACStatusQueryTimer) {
	value, _ = ASANACStatusQueryTimer_Lookup(p)
	return
}

func ASANACStatusQueryTimer_Gets(p *radius.Packet) (values []ASANACStatusQueryTimer, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 90) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASANACStatusQueryTimer(i))
	}
	return
}

func ASANACStatusQueryTimer_Lookup(p *radius.Packet) (value ASANACStatusQueryTimer, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASANACStatusQueryTimer(i)
	return
}

func ASANACStatusQueryTimer_Set(p *radius.Packet, value ASANACStatusQueryTimer) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 90, a)
}

func ASANACStatusQueryTimer_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 90)
}

type ASANACRevalidationTimer uint32

var ASANACRevalidationTimer_Strings = map[ASANACRevalidationTimer]string{}

func (a ASANACRevalidationTimer) String() string {
	if str, ok := ASANACRevalidationTimer_Strings[a]; ok {
		return str
	}
	return "ASANACRevalidationTimer(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASANACRevalidationTimer_Add(p *radius.Packet, value ASANACRevalidationTimer) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 91, a)
}

func ASANACRevalidationTimer_Get(p *radius.Packet) (value ASANACRevalidationTimer) {
	value, _ = ASANACRevalidationTimer_Lookup(p)
	return
}

func ASANACRevalidationTimer_Gets(p *radius.Packet) (values []ASANACRevalidationTimer, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 91) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASANACRevalidationTimer(i))
	}
	return
}

func ASANACRevalidationTimer_Lookup(p *radius.Packet) (value ASANACRevalidationTimer, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASANACRevalidationTimer(i)
	return
}

func ASANACRevalidationTimer_Set(p *radius.Packet, value ASANACRevalidationTimer) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 91, a)
}

func ASANACRevalidationTimer_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 91)
}

func ASANACDefaultACL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 92, a)
}

func ASANACDefaultACL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 92, a)
}

func ASANACDefaultACL_Get(p *radius.Packet) (value []byte) {
	value, _ = ASANACDefaultACL_Lookup(p)
	return
}

func ASANACDefaultACL_GetString(p *radius.Packet) (value string) {
	value, _ = ASANACDefaultACL_LookupString(p)
	return
}

func ASANACDefaultACL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 92) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASANACDefaultACL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 92) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASANACDefaultACL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASANACDefaultACL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASANACDefaultACL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 92, a)
}

func ASANACDefaultACL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 92, a)
}

func ASANACDefaultACL_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 92)
}

type ASAWebVPNURLEntryEnable uint32

const (
	ASAWebVPNURLEntryEnable_Value_Disabled ASAWebVPNURLEntryEnable = 0
	ASAWebVPNURLEntryEnable_Value_Enabled  ASAWebVPNURLEntryEnable = 1
)

var ASAWebVPNURLEntryEnable_Strings = map[ASAWebVPNURLEntryEnable]string{
	ASAWebVPNURLEntryEnable_Value_Disabled: "Disabled",
	ASAWebVPNURLEntryEnable_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNURLEntryEnable) String() string {
	if str, ok := ASAWebVPNURLEntryEnable_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNURLEntryEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNURLEntryEnable_Add(p *radius.Packet, value ASAWebVPNURLEntryEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 93, a)
}

func ASAWebVPNURLEntryEnable_Get(p *radius.Packet) (value ASAWebVPNURLEntryEnable) {
	value, _ = ASAWebVPNURLEntryEnable_Lookup(p)
	return
}

func ASAWebVPNURLEntryEnable_Gets(p *radius.Packet) (values []ASAWebVPNURLEntryEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 93) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNURLEntryEnable(i))
	}
	return
}

func ASAWebVPNURLEntryEnable_Lookup(p *radius.Packet) (value ASAWebVPNURLEntryEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNURLEntryEnable(i)
	return
}

func ASAWebVPNURLEntryEnable_Set(p *radius.Packet, value ASAWebVPNURLEntryEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 93, a)
}

func ASAWebVPNURLEntryEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 93)
}

type ASAWebVPNFileAccessEnable uint32

const (
	ASAWebVPNFileAccessEnable_Value_Disabled ASAWebVPNFileAccessEnable = 0
	ASAWebVPNFileAccessEnable_Value_Enabled  ASAWebVPNFileAccessEnable = 1
)

var ASAWebVPNFileAccessEnable_Strings = map[ASAWebVPNFileAccessEnable]string{
	ASAWebVPNFileAccessEnable_Value_Disabled: "Disabled",
	ASAWebVPNFileAccessEnable_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNFileAccessEnable) String() string {
	if str, ok := ASAWebVPNFileAccessEnable_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNFileAccessEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNFileAccessEnable_Add(p *radius.Packet, value ASAWebVPNFileAccessEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 94, a)
}

func ASAWebVPNFileAccessEnable_Get(p *radius.Packet) (value ASAWebVPNFileAccessEnable) {
	value, _ = ASAWebVPNFileAccessEnable_Lookup(p)
	return
}

func ASAWebVPNFileAccessEnable_Gets(p *radius.Packet) (values []ASAWebVPNFileAccessEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 94) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNFileAccessEnable(i))
	}
	return
}

func ASAWebVPNFileAccessEnable_Lookup(p *radius.Packet) (value ASAWebVPNFileAccessEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNFileAccessEnable(i)
	return
}

func ASAWebVPNFileAccessEnable_Set(p *radius.Packet, value ASAWebVPNFileAccessEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 94, a)
}

func ASAWebVPNFileAccessEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 94)
}

type ASAWebVPNFileServerEntryEnable uint32

const (
	ASAWebVPNFileServerEntryEnable_Value_Disabled ASAWebVPNFileServerEntryEnable = 0
	ASAWebVPNFileServerEntryEnable_Value_Enabled  ASAWebVPNFileServerEntryEnable = 1
)

var ASAWebVPNFileServerEntryEnable_Strings = map[ASAWebVPNFileServerEntryEnable]string{
	ASAWebVPNFileServerEntryEnable_Value_Disabled: "Disabled",
	ASAWebVPNFileServerEntryEnable_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNFileServerEntryEnable) String() string {
	if str, ok := ASAWebVPNFileServerEntryEnable_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNFileServerEntryEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNFileServerEntryEnable_Add(p *radius.Packet, value ASAWebVPNFileServerEntryEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 95, a)
}

func ASAWebVPNFileServerEntryEnable_Get(p *radius.Packet) (value ASAWebVPNFileServerEntryEnable) {
	value, _ = ASAWebVPNFileServerEntryEnable_Lookup(p)
	return
}

func ASAWebVPNFileServerEntryEnable_Gets(p *radius.Packet) (values []ASAWebVPNFileServerEntryEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 95) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNFileServerEntryEnable(i))
	}
	return
}

func ASAWebVPNFileServerEntryEnable_Lookup(p *radius.Packet) (value ASAWebVPNFileServerEntryEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNFileServerEntryEnable(i)
	return
}

func ASAWebVPNFileServerEntryEnable_Set(p *radius.Packet, value ASAWebVPNFileServerEntryEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 95, a)
}

func ASAWebVPNFileServerEntryEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 95)
}

type ASAWebVPNFileServerBrowsingEnable uint32

const (
	ASAWebVPNFileServerBrowsingEnable_Value_Disabled ASAWebVPNFileServerBrowsingEnable = 0
	ASAWebVPNFileServerBrowsingEnable_Value_Enabled  ASAWebVPNFileServerBrowsingEnable = 1
)

var ASAWebVPNFileServerBrowsingEnable_Strings = map[ASAWebVPNFileServerBrowsingEnable]string{
	ASAWebVPNFileServerBrowsingEnable_Value_Disabled: "Disabled",
	ASAWebVPNFileServerBrowsingEnable_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNFileServerBrowsingEnable) String() string {
	if str, ok := ASAWebVPNFileServerBrowsingEnable_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNFileServerBrowsingEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNFileServerBrowsingEnable_Add(p *radius.Packet, value ASAWebVPNFileServerBrowsingEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 96, a)
}

func ASAWebVPNFileServerBrowsingEnable_Get(p *radius.Packet) (value ASAWebVPNFileServerBrowsingEnable) {
	value, _ = ASAWebVPNFileServerBrowsingEnable_Lookup(p)
	return
}

func ASAWebVPNFileServerBrowsingEnable_Gets(p *radius.Packet) (values []ASAWebVPNFileServerBrowsingEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 96) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNFileServerBrowsingEnable(i))
	}
	return
}

func ASAWebVPNFileServerBrowsingEnable_Lookup(p *radius.Packet) (value ASAWebVPNFileServerBrowsingEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNFileServerBrowsingEnable(i)
	return
}

func ASAWebVPNFileServerBrowsingEnable_Set(p *radius.Packet, value ASAWebVPNFileServerBrowsingEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 96, a)
}

func ASAWebVPNFileServerBrowsingEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 96)
}

type ASAWebVPNPortForwardingEnable uint32

const (
	ASAWebVPNPortForwardingEnable_Value_Disabled ASAWebVPNPortForwardingEnable = 0
	ASAWebVPNPortForwardingEnable_Value_Enabled  ASAWebVPNPortForwardingEnable = 1
)

var ASAWebVPNPortForwardingEnable_Strings = map[ASAWebVPNPortForwardingEnable]string{
	ASAWebVPNPortForwardingEnable_Value_Disabled: "Disabled",
	ASAWebVPNPortForwardingEnable_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNPortForwardingEnable) String() string {
	if str, ok := ASAWebVPNPortForwardingEnable_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNPortForwardingEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNPortForwardingEnable_Add(p *radius.Packet, value ASAWebVPNPortForwardingEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 97, a)
}

func ASAWebVPNPortForwardingEnable_Get(p *radius.Packet) (value ASAWebVPNPortForwardingEnable) {
	value, _ = ASAWebVPNPortForwardingEnable_Lookup(p)
	return
}

func ASAWebVPNPortForwardingEnable_Gets(p *radius.Packet) (values []ASAWebVPNPortForwardingEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 97) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNPortForwardingEnable(i))
	}
	return
}

func ASAWebVPNPortForwardingEnable_Lookup(p *radius.Packet) (value ASAWebVPNPortForwardingEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNPortForwardingEnable(i)
	return
}

func ASAWebVPNPortForwardingEnable_Set(p *radius.Packet, value ASAWebVPNPortForwardingEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 97, a)
}

func ASAWebVPNPortForwardingEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 97)
}

type ASAWebVPNPortForwardingExchangeProxyEnable uint32

const (
	ASAWebVPNPortForwardingExchangeProxyEnable_Value_Disabled ASAWebVPNPortForwardingExchangeProxyEnable = 0
	ASAWebVPNPortForwardingExchangeProxyEnable_Value_Enabled  ASAWebVPNPortForwardingExchangeProxyEnable = 1
)

var ASAWebVPNPortForwardingExchangeProxyEnable_Strings = map[ASAWebVPNPortForwardingExchangeProxyEnable]string{
	ASAWebVPNPortForwardingExchangeProxyEnable_Value_Disabled: "Disabled",
	ASAWebVPNPortForwardingExchangeProxyEnable_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNPortForwardingExchangeProxyEnable) String() string {
	if str, ok := ASAWebVPNPortForwardingExchangeProxyEnable_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNPortForwardingExchangeProxyEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNPortForwardingExchangeProxyEnable_Add(p *radius.Packet, value ASAWebVPNPortForwardingExchangeProxyEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 98, a)
}

func ASAWebVPNPortForwardingExchangeProxyEnable_Get(p *radius.Packet) (value ASAWebVPNPortForwardingExchangeProxyEnable) {
	value, _ = ASAWebVPNPortForwardingExchangeProxyEnable_Lookup(p)
	return
}

func ASAWebVPNPortForwardingExchangeProxyEnable_Gets(p *radius.Packet) (values []ASAWebVPNPortForwardingExchangeProxyEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 98) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNPortForwardingExchangeProxyEnable(i))
	}
	return
}

func ASAWebVPNPortForwardingExchangeProxyEnable_Lookup(p *radius.Packet) (value ASAWebVPNPortForwardingExchangeProxyEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNPortForwardingExchangeProxyEnable(i)
	return
}

func ASAWebVPNPortForwardingExchangeProxyEnable_Set(p *radius.Packet, value ASAWebVPNPortForwardingExchangeProxyEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 98, a)
}

func ASAWebVPNPortForwardingExchangeProxyEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 98)
}

type ASAWebVPNPortForwardingHTTPProxy uint32

const (
	ASAWebVPNPortForwardingHTTPProxy_Value_Disabled ASAWebVPNPortForwardingHTTPProxy = 0
	ASAWebVPNPortForwardingHTTPProxy_Value_Enabled  ASAWebVPNPortForwardingHTTPProxy = 1
)

var ASAWebVPNPortForwardingHTTPProxy_Strings = map[ASAWebVPNPortForwardingHTTPProxy]string{
	ASAWebVPNPortForwardingHTTPProxy_Value_Disabled: "Disabled",
	ASAWebVPNPortForwardingHTTPProxy_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNPortForwardingHTTPProxy) String() string {
	if str, ok := ASAWebVPNPortForwardingHTTPProxy_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNPortForwardingHTTPProxy(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNPortForwardingHTTPProxy_Add(p *radius.Packet, value ASAWebVPNPortForwardingHTTPProxy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 99, a)
}

func ASAWebVPNPortForwardingHTTPProxy_Get(p *radius.Packet) (value ASAWebVPNPortForwardingHTTPProxy) {
	value, _ = ASAWebVPNPortForwardingHTTPProxy_Lookup(p)
	return
}

func ASAWebVPNPortForwardingHTTPProxy_Gets(p *radius.Packet) (values []ASAWebVPNPortForwardingHTTPProxy, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNPortForwardingHTTPProxy(i))
	}
	return
}

func ASAWebVPNPortForwardingHTTPProxy_Lookup(p *radius.Packet) (value ASAWebVPNPortForwardingHTTPProxy, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNPortForwardingHTTPProxy(i)
	return
}

func ASAWebVPNPortForwardingHTTPProxy_Set(p *radius.Packet, value ASAWebVPNPortForwardingHTTPProxy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 99, a)
}

func ASAWebVPNPortForwardingHTTPProxy_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 99)
}

type ASAWebVPNCitrixMetaframeEnable uint32

const (
	ASAWebVPNCitrixMetaframeEnable_Value_Disabled ASAWebVPNCitrixMetaframeEnable = 0
	ASAWebVPNCitrixMetaframeEnable_Value_Enabled  ASAWebVPNCitrixMetaframeEnable = 1
)

var ASAWebVPNCitrixMetaframeEnable_Strings = map[ASAWebVPNCitrixMetaframeEnable]string{
	ASAWebVPNCitrixMetaframeEnable_Value_Disabled: "Disabled",
	ASAWebVPNCitrixMetaframeEnable_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNCitrixMetaframeEnable) String() string {
	if str, ok := ASAWebVPNCitrixMetaframeEnable_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNCitrixMetaframeEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNCitrixMetaframeEnable_Add(p *radius.Packet, value ASAWebVPNCitrixMetaframeEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 101, a)
}

func ASAWebVPNCitrixMetaframeEnable_Get(p *radius.Packet) (value ASAWebVPNCitrixMetaframeEnable) {
	value, _ = ASAWebVPNCitrixMetaframeEnable_Lookup(p)
	return
}

func ASAWebVPNCitrixMetaframeEnable_Gets(p *radius.Packet) (values []ASAWebVPNCitrixMetaframeEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNCitrixMetaframeEnable(i))
	}
	return
}

func ASAWebVPNCitrixMetaframeEnable_Lookup(p *radius.Packet) (value ASAWebVPNCitrixMetaframeEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNCitrixMetaframeEnable(i)
	return
}

func ASAWebVPNCitrixMetaframeEnable_Set(p *radius.Packet, value ASAWebVPNCitrixMetaframeEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 101, a)
}

func ASAWebVPNCitrixMetaframeEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 101)
}

type ASAWebVPNApplyACL uint32

const (
	ASAWebVPNApplyACL_Value_Disabled ASAWebVPNApplyACL = 0
	ASAWebVPNApplyACL_Value_Enabled  ASAWebVPNApplyACL = 1
)

var ASAWebVPNApplyACL_Strings = map[ASAWebVPNApplyACL]string{
	ASAWebVPNApplyACL_Value_Disabled: "Disabled",
	ASAWebVPNApplyACL_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNApplyACL) String() string {
	if str, ok := ASAWebVPNApplyACL_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNApplyACL(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNApplyACL_Add(p *radius.Packet, value ASAWebVPNApplyACL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 102, a)
}

func ASAWebVPNApplyACL_Get(p *radius.Packet) (value ASAWebVPNApplyACL) {
	value, _ = ASAWebVPNApplyACL_Lookup(p)
	return
}

func ASAWebVPNApplyACL_Gets(p *radius.Packet) (values []ASAWebVPNApplyACL, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNApplyACL(i))
	}
	return
}

func ASAWebVPNApplyACL_Lookup(p *radius.Packet) (value ASAWebVPNApplyACL, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNApplyACL(i)
	return
}

func ASAWebVPNApplyACL_Set(p *radius.Packet, value ASAWebVPNApplyACL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 102, a)
}

func ASAWebVPNApplyACL_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 102)
}

type ASAWebVPNSSLVPNClientEnable uint32

const (
	ASAWebVPNSSLVPNClientEnable_Value_Disabled ASAWebVPNSSLVPNClientEnable = 0
	ASAWebVPNSSLVPNClientEnable_Value_Enabled  ASAWebVPNSSLVPNClientEnable = 1
)

var ASAWebVPNSSLVPNClientEnable_Strings = map[ASAWebVPNSSLVPNClientEnable]string{
	ASAWebVPNSSLVPNClientEnable_Value_Disabled: "Disabled",
	ASAWebVPNSSLVPNClientEnable_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNSSLVPNClientEnable) String() string {
	if str, ok := ASAWebVPNSSLVPNClientEnable_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSSLVPNClientEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSSLVPNClientEnable_Add(p *radius.Packet, value ASAWebVPNSSLVPNClientEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 103, a)
}

func ASAWebVPNSSLVPNClientEnable_Get(p *radius.Packet) (value ASAWebVPNSSLVPNClientEnable) {
	value, _ = ASAWebVPNSSLVPNClientEnable_Lookup(p)
	return
}

func ASAWebVPNSSLVPNClientEnable_Gets(p *radius.Packet) (values []ASAWebVPNSSLVPNClientEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSSLVPNClientEnable(i))
	}
	return
}

func ASAWebVPNSSLVPNClientEnable_Lookup(p *radius.Packet) (value ASAWebVPNSSLVPNClientEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSSLVPNClientEnable(i)
	return
}

func ASAWebVPNSSLVPNClientEnable_Set(p *radius.Packet, value ASAWebVPNSSLVPNClientEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 103, a)
}

func ASAWebVPNSSLVPNClientEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 103)
}

type ASAWebVPNSSLVPNClientRequired uint32

const (
	ASAWebVPNSSLVPNClientRequired_Value_Disabled ASAWebVPNSSLVPNClientRequired = 0
	ASAWebVPNSSLVPNClientRequired_Value_Enabled  ASAWebVPNSSLVPNClientRequired = 1
)

var ASAWebVPNSSLVPNClientRequired_Strings = map[ASAWebVPNSSLVPNClientRequired]string{
	ASAWebVPNSSLVPNClientRequired_Value_Disabled: "Disabled",
	ASAWebVPNSSLVPNClientRequired_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNSSLVPNClientRequired) String() string {
	if str, ok := ASAWebVPNSSLVPNClientRequired_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSSLVPNClientRequired(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSSLVPNClientRequired_Add(p *radius.Packet, value ASAWebVPNSSLVPNClientRequired) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 104, a)
}

func ASAWebVPNSSLVPNClientRequired_Get(p *radius.Packet) (value ASAWebVPNSSLVPNClientRequired) {
	value, _ = ASAWebVPNSSLVPNClientRequired_Lookup(p)
	return
}

func ASAWebVPNSSLVPNClientRequired_Gets(p *radius.Packet) (values []ASAWebVPNSSLVPNClientRequired, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 104) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSSLVPNClientRequired(i))
	}
	return
}

func ASAWebVPNSSLVPNClientRequired_Lookup(p *radius.Packet) (value ASAWebVPNSSLVPNClientRequired, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSSLVPNClientRequired(i)
	return
}

func ASAWebVPNSSLVPNClientRequired_Set(p *radius.Packet, value ASAWebVPNSSLVPNClientRequired) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 104, a)
}

func ASAWebVPNSSLVPNClientRequired_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 104)
}

type ASAWebVPNSSLVPNClientKeepInstallation uint32

const (
	ASAWebVPNSSLVPNClientKeepInstallation_Value_Disabled ASAWebVPNSSLVPNClientKeepInstallation = 0
	ASAWebVPNSSLVPNClientKeepInstallation_Value_Enabled  ASAWebVPNSSLVPNClientKeepInstallation = 1
)

var ASAWebVPNSSLVPNClientKeepInstallation_Strings = map[ASAWebVPNSSLVPNClientKeepInstallation]string{
	ASAWebVPNSSLVPNClientKeepInstallation_Value_Disabled: "Disabled",
	ASAWebVPNSSLVPNClientKeepInstallation_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNSSLVPNClientKeepInstallation) String() string {
	if str, ok := ASAWebVPNSSLVPNClientKeepInstallation_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSSLVPNClientKeepInstallation(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSSLVPNClientKeepInstallation_Add(p *radius.Packet, value ASAWebVPNSSLVPNClientKeepInstallation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 105, a)
}

func ASAWebVPNSSLVPNClientKeepInstallation_Get(p *radius.Packet) (value ASAWebVPNSSLVPNClientKeepInstallation) {
	value, _ = ASAWebVPNSSLVPNClientKeepInstallation_Lookup(p)
	return
}

func ASAWebVPNSSLVPNClientKeepInstallation_Gets(p *radius.Packet) (values []ASAWebVPNSSLVPNClientKeepInstallation, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSSLVPNClientKeepInstallation(i))
	}
	return
}

func ASAWebVPNSSLVPNClientKeepInstallation_Lookup(p *radius.Packet) (value ASAWebVPNSSLVPNClientKeepInstallation, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSSLVPNClientKeepInstallation(i)
	return
}

func ASAWebVPNSSLVPNClientKeepInstallation_Set(p *radius.Packet, value ASAWebVPNSSLVPNClientKeepInstallation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 105, a)
}

func ASAWebVPNSSLVPNClientKeepInstallation_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 105)
}

type ASASVCKeepalive uint32

var ASASVCKeepalive_Strings = map[ASASVCKeepalive]string{}

func (a ASASVCKeepalive) String() string {
	if str, ok := ASASVCKeepalive_Strings[a]; ok {
		return str
	}
	return "ASASVCKeepalive(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASVCKeepalive_Add(p *radius.Packet, value ASASVCKeepalive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 107, a)
}

func ASASVCKeepalive_Get(p *radius.Packet) (value ASASVCKeepalive) {
	value, _ = ASASVCKeepalive_Lookup(p)
	return
}

func ASASVCKeepalive_Gets(p *radius.Packet) (values []ASASVCKeepalive, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 107) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASVCKeepalive(i))
	}
	return
}

func ASASVCKeepalive_Lookup(p *radius.Packet) (value ASASVCKeepalive, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASVCKeepalive(i)
	return
}

func ASASVCKeepalive_Set(p *radius.Packet, value ASASVCKeepalive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 107, a)
}

func ASASVCKeepalive_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 107)
}

type ASAWebVPNSVCKeepaliveFrequency uint32

var ASAWebVPNSVCKeepaliveFrequency_Strings = map[ASAWebVPNSVCKeepaliveFrequency]string{}

func (a ASAWebVPNSVCKeepaliveFrequency) String() string {
	if str, ok := ASAWebVPNSVCKeepaliveFrequency_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSVCKeepaliveFrequency(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSVCKeepaliveFrequency_Add(p *radius.Packet, value ASAWebVPNSVCKeepaliveFrequency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 107, a)
}

func ASAWebVPNSVCKeepaliveFrequency_Get(p *radius.Packet) (value ASAWebVPNSVCKeepaliveFrequency) {
	value, _ = ASAWebVPNSVCKeepaliveFrequency_Lookup(p)
	return
}

func ASAWebVPNSVCKeepaliveFrequency_Gets(p *radius.Packet) (values []ASAWebVPNSVCKeepaliveFrequency, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 107) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSVCKeepaliveFrequency(i))
	}
	return
}

func ASAWebVPNSVCKeepaliveFrequency_Lookup(p *radius.Packet) (value ASAWebVPNSVCKeepaliveFrequency, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSVCKeepaliveFrequency(i)
	return
}

func ASAWebVPNSVCKeepaliveFrequency_Set(p *radius.Packet, value ASAWebVPNSVCKeepaliveFrequency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 107, a)
}

func ASAWebVPNSVCKeepaliveFrequency_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 107)
}

type ASASVCDPDIntervalClient uint32

var ASASVCDPDIntervalClient_Strings = map[ASASVCDPDIntervalClient]string{}

func (a ASASVCDPDIntervalClient) String() string {
	if str, ok := ASASVCDPDIntervalClient_Strings[a]; ok {
		return str
	}
	return "ASASVCDPDIntervalClient(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASVCDPDIntervalClient_Add(p *radius.Packet, value ASASVCDPDIntervalClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 108, a)
}

func ASASVCDPDIntervalClient_Get(p *radius.Packet) (value ASASVCDPDIntervalClient) {
	value, _ = ASASVCDPDIntervalClient_Lookup(p)
	return
}

func ASASVCDPDIntervalClient_Gets(p *radius.Packet) (values []ASASVCDPDIntervalClient, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 108) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASVCDPDIntervalClient(i))
	}
	return
}

func ASASVCDPDIntervalClient_Lookup(p *radius.Packet) (value ASASVCDPDIntervalClient, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASVCDPDIntervalClient(i)
	return
}

func ASASVCDPDIntervalClient_Set(p *radius.Packet, value ASASVCDPDIntervalClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 108, a)
}

func ASASVCDPDIntervalClient_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 108)
}

type ASAWebVPNSVCClientDPDFrequency uint32

var ASAWebVPNSVCClientDPDFrequency_Strings = map[ASAWebVPNSVCClientDPDFrequency]string{}

func (a ASAWebVPNSVCClientDPDFrequency) String() string {
	if str, ok := ASAWebVPNSVCClientDPDFrequency_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSVCClientDPDFrequency(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSVCClientDPDFrequency_Add(p *radius.Packet, value ASAWebVPNSVCClientDPDFrequency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 108, a)
}

func ASAWebVPNSVCClientDPDFrequency_Get(p *radius.Packet) (value ASAWebVPNSVCClientDPDFrequency) {
	value, _ = ASAWebVPNSVCClientDPDFrequency_Lookup(p)
	return
}

func ASAWebVPNSVCClientDPDFrequency_Gets(p *radius.Packet) (values []ASAWebVPNSVCClientDPDFrequency, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 108) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSVCClientDPDFrequency(i))
	}
	return
}

func ASAWebVPNSVCClientDPDFrequency_Lookup(p *radius.Packet) (value ASAWebVPNSVCClientDPDFrequency, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSVCClientDPDFrequency(i)
	return
}

func ASAWebVPNSVCClientDPDFrequency_Set(p *radius.Packet, value ASAWebVPNSVCClientDPDFrequency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 108, a)
}

func ASAWebVPNSVCClientDPDFrequency_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 108)
}

type ASASVCDPDIntervalGateway uint32

var ASASVCDPDIntervalGateway_Strings = map[ASASVCDPDIntervalGateway]string{}

func (a ASASVCDPDIntervalGateway) String() string {
	if str, ok := ASASVCDPDIntervalGateway_Strings[a]; ok {
		return str
	}
	return "ASASVCDPDIntervalGateway(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASVCDPDIntervalGateway_Add(p *radius.Packet, value ASASVCDPDIntervalGateway) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 109, a)
}

func ASASVCDPDIntervalGateway_Get(p *radius.Packet) (value ASASVCDPDIntervalGateway) {
	value, _ = ASASVCDPDIntervalGateway_Lookup(p)
	return
}

func ASASVCDPDIntervalGateway_Gets(p *radius.Packet) (values []ASASVCDPDIntervalGateway, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASVCDPDIntervalGateway(i))
	}
	return
}

func ASASVCDPDIntervalGateway_Lookup(p *radius.Packet) (value ASASVCDPDIntervalGateway, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASVCDPDIntervalGateway(i)
	return
}

func ASASVCDPDIntervalGateway_Set(p *radius.Packet, value ASASVCDPDIntervalGateway) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 109, a)
}

func ASASVCDPDIntervalGateway_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 109)
}

type ASAWebVPNSVCGatewayDPDFrequency uint32

var ASAWebVPNSVCGatewayDPDFrequency_Strings = map[ASAWebVPNSVCGatewayDPDFrequency]string{}

func (a ASAWebVPNSVCGatewayDPDFrequency) String() string {
	if str, ok := ASAWebVPNSVCGatewayDPDFrequency_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSVCGatewayDPDFrequency(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSVCGatewayDPDFrequency_Add(p *radius.Packet, value ASAWebVPNSVCGatewayDPDFrequency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 109, a)
}

func ASAWebVPNSVCGatewayDPDFrequency_Get(p *radius.Packet) (value ASAWebVPNSVCGatewayDPDFrequency) {
	value, _ = ASAWebVPNSVCGatewayDPDFrequency_Lookup(p)
	return
}

func ASAWebVPNSVCGatewayDPDFrequency_Gets(p *radius.Packet) (values []ASAWebVPNSVCGatewayDPDFrequency, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSVCGatewayDPDFrequency(i))
	}
	return
}

func ASAWebVPNSVCGatewayDPDFrequency_Lookup(p *radius.Packet) (value ASAWebVPNSVCGatewayDPDFrequency, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSVCGatewayDPDFrequency(i)
	return
}

func ASAWebVPNSVCGatewayDPDFrequency_Set(p *radius.Packet, value ASAWebVPNSVCGatewayDPDFrequency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 109, a)
}

func ASAWebVPNSVCGatewayDPDFrequency_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 109)
}

type ASASVCRekeyTime uint32

var ASASVCRekeyTime_Strings = map[ASASVCRekeyTime]string{}

func (a ASASVCRekeyTime) String() string {
	if str, ok := ASASVCRekeyTime_Strings[a]; ok {
		return str
	}
	return "ASASVCRekeyTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASVCRekeyTime_Add(p *radius.Packet, value ASASVCRekeyTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 110, a)
}

func ASASVCRekeyTime_Get(p *radius.Packet) (value ASASVCRekeyTime) {
	value, _ = ASASVCRekeyTime_Lookup(p)
	return
}

func ASASVCRekeyTime_Gets(p *radius.Packet) (values []ASASVCRekeyTime, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASVCRekeyTime(i))
	}
	return
}

func ASASVCRekeyTime_Lookup(p *radius.Packet) (value ASASVCRekeyTime, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASVCRekeyTime(i)
	return
}

func ASASVCRekeyTime_Set(p *radius.Packet, value ASASVCRekeyTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 110, a)
}

func ASASVCRekeyTime_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 110)
}

type ASAWebVPNSVCRekeyTime uint32

var ASAWebVPNSVCRekeyTime_Strings = map[ASAWebVPNSVCRekeyTime]string{}

func (a ASAWebVPNSVCRekeyTime) String() string {
	if str, ok := ASAWebVPNSVCRekeyTime_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSVCRekeyTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSVCRekeyTime_Add(p *radius.Packet, value ASAWebVPNSVCRekeyTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 110, a)
}

func ASAWebVPNSVCRekeyTime_Get(p *radius.Packet) (value ASAWebVPNSVCRekeyTime) {
	value, _ = ASAWebVPNSVCRekeyTime_Lookup(p)
	return
}

func ASAWebVPNSVCRekeyTime_Gets(p *radius.Packet) (values []ASAWebVPNSVCRekeyTime, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSVCRekeyTime(i))
	}
	return
}

func ASAWebVPNSVCRekeyTime_Lookup(p *radius.Packet) (value ASAWebVPNSVCRekeyTime, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSVCRekeyTime(i)
	return
}

func ASAWebVPNSVCRekeyTime_Set(p *radius.Packet, value ASAWebVPNSVCRekeyTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 110, a)
}

func ASAWebVPNSVCRekeyTime_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 110)
}

type ASAWebVPNSVCRekeyMethod uint32

const (
	ASAWebVPNSVCRekeyMethod_Value_Off       ASAWebVPNSVCRekeyMethod = 0
	ASAWebVPNSVCRekeyMethod_Value_SSL       ASAWebVPNSVCRekeyMethod = 1
	ASAWebVPNSVCRekeyMethod_Value_NewTunnel ASAWebVPNSVCRekeyMethod = 2
)

var ASAWebVPNSVCRekeyMethod_Strings = map[ASAWebVPNSVCRekeyMethod]string{
	ASAWebVPNSVCRekeyMethod_Value_Off:       "Off",
	ASAWebVPNSVCRekeyMethod_Value_SSL:       "SSL",
	ASAWebVPNSVCRekeyMethod_Value_NewTunnel: "New-Tunnel",
}

func (a ASAWebVPNSVCRekeyMethod) String() string {
	if str, ok := ASAWebVPNSVCRekeyMethod_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSVCRekeyMethod(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSVCRekeyMethod_Add(p *radius.Packet, value ASAWebVPNSVCRekeyMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 111, a)
}

func ASAWebVPNSVCRekeyMethod_Get(p *radius.Packet) (value ASAWebVPNSVCRekeyMethod) {
	value, _ = ASAWebVPNSVCRekeyMethod_Lookup(p)
	return
}

func ASAWebVPNSVCRekeyMethod_Gets(p *radius.Packet) (values []ASAWebVPNSVCRekeyMethod, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 111) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSVCRekeyMethod(i))
	}
	return
}

func ASAWebVPNSVCRekeyMethod_Lookup(p *radius.Packet) (value ASAWebVPNSVCRekeyMethod, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSVCRekeyMethod(i)
	return
}

func ASAWebVPNSVCRekeyMethod_Set(p *radius.Packet, value ASAWebVPNSVCRekeyMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 111, a)
}

func ASAWebVPNSVCRekeyMethod_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 111)
}

type ASAWebVPNSVCCompression uint32

const (
	ASAWebVPNSVCCompression_Value_Off                ASAWebVPNSVCCompression = 0
	ASAWebVPNSVCCompression_Value_DeflateCompression ASAWebVPNSVCCompression = 1
)

var ASAWebVPNSVCCompression_Strings = map[ASAWebVPNSVCCompression]string{
	ASAWebVPNSVCCompression_Value_Off:                "Off",
	ASAWebVPNSVCCompression_Value_DeflateCompression: "Deflate-Compression",
}

func (a ASAWebVPNSVCCompression) String() string {
	if str, ok := ASAWebVPNSVCCompression_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSVCCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSVCCompression_Add(p *radius.Packet, value ASAWebVPNSVCCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 112, a)
}

func ASAWebVPNSVCCompression_Get(p *radius.Packet) (value ASAWebVPNSVCCompression) {
	value, _ = ASAWebVPNSVCCompression_Lookup(p)
	return
}

func ASAWebVPNSVCCompression_Gets(p *radius.Packet) (values []ASAWebVPNSVCCompression, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 112) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSVCCompression(i))
	}
	return
}

func ASAWebVPNSVCCompression_Lookup(p *radius.Packet) (value ASAWebVPNSVCCompression, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSVCCompression(i)
	return
}

func ASAWebVPNSVCCompression_Set(p *radius.Packet, value ASAWebVPNSVCCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 112, a)
}

func ASAWebVPNSVCCompression_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 112)
}

func ASAWebVPNCustomization_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 113, a)
}

func ASAWebVPNCustomization_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 113, a)
}

func ASAWebVPNCustomization_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNCustomization_Lookup(p)
	return
}

func ASAWebVPNCustomization_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNCustomization_LookupString(p)
	return
}

func ASAWebVPNCustomization_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 113) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNCustomization_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 113) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNCustomization_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNCustomization_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNCustomization_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 113, a)
}

func ASAWebVPNCustomization_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 113, a)
}

func ASAWebVPNCustomization_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 113)
}

func ASAWebVPNSSOServerName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 114, a)
}

func ASAWebVPNSSOServerName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 114, a)
}

func ASAWebVPNSSOServerName_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNSSOServerName_Lookup(p)
	return
}

func ASAWebVPNSSOServerName_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNSSOServerName_LookupString(p)
	return
}

func ASAWebVPNSSOServerName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNSSOServerName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNSSOServerName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNSSOServerName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNSSOServerName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 114, a)
}

func ASAWebVPNSSOServerName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 114, a)
}

func ASAWebVPNSSOServerName_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 114)
}

func ASAWebVPNDenyMessage_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 116, a)
}

func ASAWebVPNDenyMessage_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 116, a)
}

func ASAWebVPNDenyMessage_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNDenyMessage_Lookup(p)
	return
}

func ASAWebVPNDenyMessage_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNDenyMessage_LookupString(p)
	return
}

func ASAWebVPNDenyMessage_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 116) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNDenyMessage_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 116) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNDenyMessage_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNDenyMessage_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNDenyMessage_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 116, a)
}

func ASAWebVPNDenyMessage_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 116, a)
}

func ASAWebVPNDenyMessage_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 116)
}

type ASAWebVPNHTTPCompression uint32

const (
	ASAWebVPNHTTPCompression_Value_Off                ASAWebVPNHTTPCompression = 0
	ASAWebVPNHTTPCompression_Value_DeflateCompression ASAWebVPNHTTPCompression = 1
)

var ASAWebVPNHTTPCompression_Strings = map[ASAWebVPNHTTPCompression]string{
	ASAWebVPNHTTPCompression_Value_Off:                "Off",
	ASAWebVPNHTTPCompression_Value_DeflateCompression: "Deflate-Compression",
}

func (a ASAWebVPNHTTPCompression) String() string {
	if str, ok := ASAWebVPNHTTPCompression_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNHTTPCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNHTTPCompression_Add(p *radius.Packet, value ASAWebVPNHTTPCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 120, a)
}

func ASAWebVPNHTTPCompression_Get(p *radius.Packet) (value ASAWebVPNHTTPCompression) {
	value, _ = ASAWebVPNHTTPCompression_Lookup(p)
	return
}

func ASAWebVPNHTTPCompression_Gets(p *radius.Packet) (values []ASAWebVPNHTTPCompression, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 120) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNHTTPCompression(i))
	}
	return
}

func ASAWebVPNHTTPCompression_Lookup(p *radius.Packet) (value ASAWebVPNHTTPCompression, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNHTTPCompression(i)
	return
}

func ASAWebVPNHTTPCompression_Set(p *radius.Packet, value ASAWebVPNHTTPCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 120, a)
}

func ASAWebVPNHTTPCompression_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 120)
}

type ASAWebVPNKeepaliveIgnore uint32

var ASAWebVPNKeepaliveIgnore_Strings = map[ASAWebVPNKeepaliveIgnore]string{}

func (a ASAWebVPNKeepaliveIgnore) String() string {
	if str, ok := ASAWebVPNKeepaliveIgnore_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNKeepaliveIgnore(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNKeepaliveIgnore_Add(p *radius.Packet, value ASAWebVPNKeepaliveIgnore) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 121, a)
}

func ASAWebVPNKeepaliveIgnore_Get(p *radius.Packet) (value ASAWebVPNKeepaliveIgnore) {
	value, _ = ASAWebVPNKeepaliveIgnore_Lookup(p)
	return
}

func ASAWebVPNKeepaliveIgnore_Gets(p *radius.Packet) (values []ASAWebVPNKeepaliveIgnore, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 121) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNKeepaliveIgnore(i))
	}
	return
}

func ASAWebVPNKeepaliveIgnore_Lookup(p *radius.Packet) (value ASAWebVPNKeepaliveIgnore, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNKeepaliveIgnore(i)
	return
}

func ASAWebVPNKeepaliveIgnore_Set(p *radius.Packet, value ASAWebVPNKeepaliveIgnore) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 121, a)
}

func ASAWebVPNKeepaliveIgnore_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 121)
}

type ASAExtendedAuthenticationOnRekey uint32

const (
	ASAExtendedAuthenticationOnRekey_Value_Disabled ASAExtendedAuthenticationOnRekey = 0
	ASAExtendedAuthenticationOnRekey_Value_Enabled  ASAExtendedAuthenticationOnRekey = 1
)

var ASAExtendedAuthenticationOnRekey_Strings = map[ASAExtendedAuthenticationOnRekey]string{
	ASAExtendedAuthenticationOnRekey_Value_Disabled: "Disabled",
	ASAExtendedAuthenticationOnRekey_Value_Enabled:  "Enabled",
}

func (a ASAExtendedAuthenticationOnRekey) String() string {
	if str, ok := ASAExtendedAuthenticationOnRekey_Strings[a]; ok {
		return str
	}
	return "ASAExtendedAuthenticationOnRekey(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAExtendedAuthenticationOnRekey_Add(p *radius.Packet, value ASAExtendedAuthenticationOnRekey) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 122, a)
}

func ASAExtendedAuthenticationOnRekey_Get(p *radius.Packet) (value ASAExtendedAuthenticationOnRekey) {
	value, _ = ASAExtendedAuthenticationOnRekey_Lookup(p)
	return
}

func ASAExtendedAuthenticationOnRekey_Gets(p *radius.Packet) (values []ASAExtendedAuthenticationOnRekey, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 122) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAExtendedAuthenticationOnRekey(i))
	}
	return
}

func ASAExtendedAuthenticationOnRekey_Lookup(p *radius.Packet) (value ASAExtendedAuthenticationOnRekey, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAExtendedAuthenticationOnRekey(i)
	return
}

func ASAExtendedAuthenticationOnRekey_Set(p *radius.Packet, value ASAExtendedAuthenticationOnRekey) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 122, a)
}

func ASAExtendedAuthenticationOnRekey_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 122)
}

type ASASVCDTLS uint32

const (
	ASASVCDTLS_Value_FALSE ASASVCDTLS = 0
	ASASVCDTLS_Value_TRUE  ASASVCDTLS = 1
)

var ASASVCDTLS_Strings = map[ASASVCDTLS]string{
	ASASVCDTLS_Value_FALSE: "FALSE",
	ASASVCDTLS_Value_TRUE:  "TRUE",
}

func (a ASASVCDTLS) String() string {
	if str, ok := ASASVCDTLS_Strings[a]; ok {
		return str
	}
	return "ASASVCDTLS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASVCDTLS_Add(p *radius.Packet, value ASASVCDTLS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 123, a)
}

func ASASVCDTLS_Get(p *radius.Packet) (value ASASVCDTLS) {
	value, _ = ASASVCDTLS_Lookup(p)
	return
}

func ASASVCDTLS_Gets(p *radius.Packet) (values []ASASVCDTLS, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 123) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASVCDTLS(i))
	}
	return
}

func ASASVCDTLS_Lookup(p *radius.Packet) (value ASASVCDTLS, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASVCDTLS(i)
	return
}

func ASASVCDTLS_Set(p *radius.Packet, value ASASVCDTLS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 123, a)
}

func ASASVCDTLS_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 123)
}

type ASAWebVPNSVCDTLSEnable uint32

const (
	ASAWebVPNSVCDTLSEnable_Value_Disabled ASAWebVPNSVCDTLSEnable = 0
	ASAWebVPNSVCDTLSEnable_Value_Enabled  ASAWebVPNSVCDTLSEnable = 1
)

var ASAWebVPNSVCDTLSEnable_Strings = map[ASAWebVPNSVCDTLSEnable]string{
	ASAWebVPNSVCDTLSEnable_Value_Disabled: "Disabled",
	ASAWebVPNSVCDTLSEnable_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNSVCDTLSEnable) String() string {
	if str, ok := ASAWebVPNSVCDTLSEnable_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSVCDTLSEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSVCDTLSEnable_Add(p *radius.Packet, value ASAWebVPNSVCDTLSEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 123, a)
}

func ASAWebVPNSVCDTLSEnable_Get(p *radius.Packet) (value ASAWebVPNSVCDTLSEnable) {
	value, _ = ASAWebVPNSVCDTLSEnable_Lookup(p)
	return
}

func ASAWebVPNSVCDTLSEnable_Gets(p *radius.Packet) (values []ASAWebVPNSVCDTLSEnable, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 123) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSVCDTLSEnable(i))
	}
	return
}

func ASAWebVPNSVCDTLSEnable_Lookup(p *radius.Packet) (value ASAWebVPNSVCDTLSEnable, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSVCDTLSEnable(i)
	return
}

func ASAWebVPNSVCDTLSEnable_Set(p *radius.Packet, value ASAWebVPNSVCDTLSEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 123, a)
}

func ASAWebVPNSVCDTLSEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 123)
}

func ASAWebVPNAutoHTTPSignon_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 124, a)
}

func ASAWebVPNAutoHTTPSignon_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 124, a)
}

func ASAWebVPNAutoHTTPSignon_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNAutoHTTPSignon_Lookup(p)
	return
}

func ASAWebVPNAutoHTTPSignon_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNAutoHTTPSignon_LookupString(p)
	return
}

func ASAWebVPNAutoHTTPSignon_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 124) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNAutoHTTPSignon_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 124) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNAutoHTTPSignon_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNAutoHTTPSignon_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNAutoHTTPSignon_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 124, a)
}

func ASAWebVPNAutoHTTPSignon_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 124, a)
}

func ASAWebVPNAutoHTTPSignon_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 124)
}

type ASASVCMTU uint32

var ASASVCMTU_Strings = map[ASASVCMTU]string{}

func (a ASASVCMTU) String() string {
	if str, ok := ASASVCMTU_Strings[a]; ok {
		return str
	}
	return "ASASVCMTU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASVCMTU_Add(p *radius.Packet, value ASASVCMTU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 125, a)
}

func ASASVCMTU_Get(p *radius.Packet) (value ASASVCMTU) {
	value, _ = ASASVCMTU_Lookup(p)
	return
}

func ASASVCMTU_Gets(p *radius.Packet) (values []ASASVCMTU, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASVCMTU(i))
	}
	return
}

func ASASVCMTU_Lookup(p *radius.Packet) (value ASASVCMTU, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASVCMTU(i)
	return
}

func ASASVCMTU_Set(p *radius.Packet, value ASASVCMTU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 125, a)
}

func ASASVCMTU_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 125)
}

type ASAWebVPNSVCDTLSMTU uint32

var ASAWebVPNSVCDTLSMTU_Strings = map[ASAWebVPNSVCDTLSMTU]string{}

func (a ASAWebVPNSVCDTLSMTU) String() string {
	if str, ok := ASAWebVPNSVCDTLSMTU_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSVCDTLSMTU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSVCDTLSMTU_Add(p *radius.Packet, value ASAWebVPNSVCDTLSMTU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 125, a)
}

func ASAWebVPNSVCDTLSMTU_Get(p *radius.Packet) (value ASAWebVPNSVCDTLSMTU) {
	value, _ = ASAWebVPNSVCDTLSMTU_Lookup(p)
	return
}

func ASAWebVPNSVCDTLSMTU_Gets(p *radius.Packet) (values []ASAWebVPNSVCDTLSMTU, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSVCDTLSMTU(i))
	}
	return
}

func ASAWebVPNSVCDTLSMTU_Lookup(p *radius.Packet) (value ASAWebVPNSVCDTLSMTU, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSVCDTLSMTU(i)
	return
}

func ASAWebVPNSVCDTLSMTU_Set(p *radius.Packet, value ASAWebVPNSVCDTLSMTU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 125, a)
}

func ASAWebVPNSVCDTLSMTU_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 125)
}

type ASAWebVPNHiddenShares uint32

const (
	ASAWebVPNHiddenShares_Value_None    ASAWebVPNHiddenShares = 0
	ASAWebVPNHiddenShares_Value_Visible ASAWebVPNHiddenShares = 1
)

var ASAWebVPNHiddenShares_Strings = map[ASAWebVPNHiddenShares]string{
	ASAWebVPNHiddenShares_Value_None:    "None",
	ASAWebVPNHiddenShares_Value_Visible: "Visible",
}

func (a ASAWebVPNHiddenShares) String() string {
	if str, ok := ASAWebVPNHiddenShares_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNHiddenShares(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNHiddenShares_Add(p *radius.Packet, value ASAWebVPNHiddenShares) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 126, a)
}

func ASAWebVPNHiddenShares_Get(p *radius.Packet) (value ASAWebVPNHiddenShares) {
	value, _ = ASAWebVPNHiddenShares_Lookup(p)
	return
}

func ASAWebVPNHiddenShares_Gets(p *radius.Packet) (values []ASAWebVPNHiddenShares, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 126) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNHiddenShares(i))
	}
	return
}

func ASAWebVPNHiddenShares_Lookup(p *radius.Packet) (value ASAWebVPNHiddenShares, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNHiddenShares(i)
	return
}

func ASAWebVPNHiddenShares_Set(p *radius.Packet, value ASAWebVPNHiddenShares) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 126, a)
}

func ASAWebVPNHiddenShares_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 126)
}

func ASASVCModules_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 127, a)
}

func ASASVCModules_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 127, a)
}

func ASASVCModules_Get(p *radius.Packet) (value []byte) {
	value, _ = ASASVCModules_Lookup(p)
	return
}

func ASASVCModules_GetString(p *radius.Packet) (value string) {
	value, _ = ASASVCModules_LookupString(p)
	return
}

func ASASVCModules_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 127) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASVCModules_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 127) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASVCModules_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASASVCModules_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASASVCModules_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 127, a)
}

func ASASVCModules_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 127, a)
}

func ASASVCModules_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 127)
}

func ASASVCProfiles_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 128, a)
}

func ASASVCProfiles_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 128, a)
}

func ASASVCProfiles_Get(p *radius.Packet) (value []byte) {
	value, _ = ASASVCProfiles_Lookup(p)
	return
}

func ASASVCProfiles_GetString(p *radius.Packet) (value string) {
	value, _ = ASASVCProfiles_LookupString(p)
	return
}

func ASASVCProfiles_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 128) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASVCProfiles_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 128) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASVCProfiles_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASASVCProfiles_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASASVCProfiles_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 128, a)
}

func ASASVCProfiles_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 128, a)
}

func ASASVCProfiles_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 128)
}

type ASASVCAsk uint32

const (
	ASASVCAsk_Value_Disabled                ASASVCAsk = 0
	ASASVCAsk_Value_Enabled                 ASASVCAsk = 1
	ASASVCAsk_Value_EnableDefaultService    ASASVCAsk = 3
	ASASVCAsk_Value_EnableDefaultClientless ASASVCAsk = 5
)

var ASASVCAsk_Strings = map[ASASVCAsk]string{
	ASASVCAsk_Value_Disabled:                "Disabled",
	ASASVCAsk_Value_Enabled:                 "Enabled",
	ASASVCAsk_Value_EnableDefaultService:    "Enable-Default-Service",
	ASASVCAsk_Value_EnableDefaultClientless: "Enable-Default-Clientless",
}

func (a ASASVCAsk) String() string {
	if str, ok := ASASVCAsk_Strings[a]; ok {
		return str
	}
	return "ASASVCAsk(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASVCAsk_Add(p *radius.Packet, value ASASVCAsk) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 131, a)
}

func ASASVCAsk_Get(p *radius.Packet) (value ASASVCAsk) {
	value, _ = ASASVCAsk_Lookup(p)
	return
}

func ASASVCAsk_Gets(p *radius.Packet) (values []ASASVCAsk, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 131) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASVCAsk(i))
	}
	return
}

func ASASVCAsk_Lookup(p *radius.Packet) (value ASASVCAsk, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASVCAsk(i)
	return
}

func ASASVCAsk_Set(p *radius.Packet, value ASASVCAsk) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 131, a)
}

func ASASVCAsk_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 131)
}

type ASASVCAskTimeout uint32

var ASASVCAskTimeout_Strings = map[ASASVCAskTimeout]string{}

func (a ASASVCAskTimeout) String() string {
	if str, ok := ASASVCAskTimeout_Strings[a]; ok {
		return str
	}
	return "ASASVCAskTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASVCAskTimeout_Add(p *radius.Packet, value ASASVCAskTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 132, a)
}

func ASASVCAskTimeout_Get(p *radius.Packet) (value ASASVCAskTimeout) {
	value, _ = ASASVCAskTimeout_Lookup(p)
	return
}

func ASASVCAskTimeout_Gets(p *radius.Packet) (values []ASASVCAskTimeout, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 132) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASVCAskTimeout(i))
	}
	return
}

func ASASVCAskTimeout_Lookup(p *radius.Packet) (value ASASVCAskTimeout, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASVCAskTimeout(i)
	return
}

func ASASVCAskTimeout_Set(p *radius.Packet, value ASASVCAskTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 132, a)
}

func ASASVCAskTimeout_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 132)
}

func ASAIEProxyPACURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 133, a)
}

func ASAIEProxyPACURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 133, a)
}

func ASAIEProxyPACURL_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIEProxyPACURL_Lookup(p)
	return
}

func ASAIEProxyPACURL_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIEProxyPACURL_LookupString(p)
	return
}

func ASAIEProxyPACURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 133) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIEProxyPACURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 133) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIEProxyPACURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIEProxyPACURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIEProxyPACURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 133, a)
}

func ASAIEProxyPACURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 133, a)
}

func ASAIEProxyPACURL_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 133)
}

type ASAStripRealm uint32

const (
	ASAStripRealm_Value_Disabled ASAStripRealm = 0
	ASAStripRealm_Value_Enabled  ASAStripRealm = 1
)

var ASAStripRealm_Strings = map[ASAStripRealm]string{
	ASAStripRealm_Value_Disabled: "Disabled",
	ASAStripRealm_Value_Enabled:  "Enabled",
}

func (a ASAStripRealm) String() string {
	if str, ok := ASAStripRealm_Strings[a]; ok {
		return str
	}
	return "ASAStripRealm(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAStripRealm_Add(p *radius.Packet, value ASAStripRealm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 135, a)
}

func ASAStripRealm_Get(p *radius.Packet) (value ASAStripRealm) {
	value, _ = ASAStripRealm_Lookup(p)
	return
}

func ASAStripRealm_Gets(p *radius.Packet) (values []ASAStripRealm, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 135) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAStripRealm(i))
	}
	return
}

func ASAStripRealm_Lookup(p *radius.Packet) (value ASAStripRealm, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAStripRealm(i)
	return
}

func ASAStripRealm_Set(p *radius.Packet, value ASAStripRealm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 135, a)
}

func ASAStripRealm_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 135)
}

func ASASmartTunnel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 136, a)
}

func ASASmartTunnel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 136, a)
}

func ASASmartTunnel_Get(p *radius.Packet) (value []byte) {
	value, _ = ASASmartTunnel_Lookup(p)
	return
}

func ASASmartTunnel_GetString(p *radius.Packet) (value string) {
	value, _ = ASASmartTunnel_LookupString(p)
	return
}

func ASASmartTunnel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 136) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASmartTunnel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 136) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASmartTunnel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASASmartTunnel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASASmartTunnel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 136, a)
}

func ASASmartTunnel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 136, a)
}

func ASASmartTunnel_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 136)
}

func ASAWebVPNSmartTunnel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 136, a)
}

func ASAWebVPNSmartTunnel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 136, a)
}

func ASAWebVPNSmartTunnel_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNSmartTunnel_Lookup(p)
	return
}

func ASAWebVPNSmartTunnel_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNSmartTunnel_LookupString(p)
	return
}

func ASAWebVPNSmartTunnel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 136) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNSmartTunnel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 136) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNSmartTunnel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNSmartTunnel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNSmartTunnel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 136, a)
}

func ASAWebVPNSmartTunnel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 136, a)
}

func ASAWebVPNSmartTunnel_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 136)
}

type ASAWebVPNActiveXRelay uint32

var ASAWebVPNActiveXRelay_Strings = map[ASAWebVPNActiveXRelay]string{}

func (a ASAWebVPNActiveXRelay) String() string {
	if str, ok := ASAWebVPNActiveXRelay_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNActiveXRelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNActiveXRelay_Add(p *radius.Packet, value ASAWebVPNActiveXRelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 137, a)
}

func ASAWebVPNActiveXRelay_Get(p *radius.Packet) (value ASAWebVPNActiveXRelay) {
	value, _ = ASAWebVPNActiveXRelay_Lookup(p)
	return
}

func ASAWebVPNActiveXRelay_Gets(p *radius.Packet) (values []ASAWebVPNActiveXRelay, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNActiveXRelay(i))
	}
	return
}

func ASAWebVPNActiveXRelay_Lookup(p *radius.Packet) (value ASAWebVPNActiveXRelay, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNActiveXRelay(i)
	return
}

func ASAWebVPNActiveXRelay_Set(p *radius.Packet, value ASAWebVPNActiveXRelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 137, a)
}

func ASAWebVPNActiveXRelay_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 137)
}

type ASASmartTunnelAuto uint32

const (
	ASASmartTunnelAuto_Value_Disabled  ASASmartTunnelAuto = 0
	ASASmartTunnelAuto_Value_Enabled   ASASmartTunnelAuto = 1
	ASASmartTunnelAuto_Value_AutoStart ASASmartTunnelAuto = 2
)

var ASASmartTunnelAuto_Strings = map[ASASmartTunnelAuto]string{
	ASASmartTunnelAuto_Value_Disabled:  "Disabled",
	ASASmartTunnelAuto_Value_Enabled:   "Enabled",
	ASASmartTunnelAuto_Value_AutoStart: "AutoStart",
}

func (a ASASmartTunnelAuto) String() string {
	if str, ok := ASASmartTunnelAuto_Strings[a]; ok {
		return str
	}
	return "ASASmartTunnelAuto(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASmartTunnelAuto_Add(p *radius.Packet, value ASASmartTunnelAuto) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 138, a)
}

func ASASmartTunnelAuto_Get(p *radius.Packet) (value ASASmartTunnelAuto) {
	value, _ = ASASmartTunnelAuto_Lookup(p)
	return
}

func ASASmartTunnelAuto_Gets(p *radius.Packet) (values []ASASmartTunnelAuto, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 138) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASmartTunnelAuto(i))
	}
	return
}

func ASASmartTunnelAuto_Lookup(p *radius.Packet) (value ASASmartTunnelAuto, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASmartTunnelAuto(i)
	return
}

func ASASmartTunnelAuto_Set(p *radius.Packet, value ASASmartTunnelAuto) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 138, a)
}

func ASASmartTunnelAuto_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 138)
}

type ASAWebVPNSmartTunnelAutoStart uint32

const (
	ASAWebVPNSmartTunnelAutoStart_Value_Disabled  ASAWebVPNSmartTunnelAutoStart = 0
	ASAWebVPNSmartTunnelAutoStart_Value_Enabled   ASAWebVPNSmartTunnelAutoStart = 1
	ASAWebVPNSmartTunnelAutoStart_Value_AutoStart ASAWebVPNSmartTunnelAutoStart = 2
)

var ASAWebVPNSmartTunnelAutoStart_Strings = map[ASAWebVPNSmartTunnelAutoStart]string{
	ASAWebVPNSmartTunnelAutoStart_Value_Disabled:  "Disabled",
	ASAWebVPNSmartTunnelAutoStart_Value_Enabled:   "Enabled",
	ASAWebVPNSmartTunnelAutoStart_Value_AutoStart: "AutoStart",
}

func (a ASAWebVPNSmartTunnelAutoStart) String() string {
	if str, ok := ASAWebVPNSmartTunnelAutoStart_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSmartTunnelAutoStart(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSmartTunnelAutoStart_Add(p *radius.Packet, value ASAWebVPNSmartTunnelAutoStart) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 138, a)
}

func ASAWebVPNSmartTunnelAutoStart_Get(p *radius.Packet) (value ASAWebVPNSmartTunnelAutoStart) {
	value, _ = ASAWebVPNSmartTunnelAutoStart_Lookup(p)
	return
}

func ASAWebVPNSmartTunnelAutoStart_Gets(p *radius.Packet) (values []ASAWebVPNSmartTunnelAutoStart, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 138) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSmartTunnelAutoStart(i))
	}
	return
}

func ASAWebVPNSmartTunnelAutoStart_Lookup(p *radius.Packet) (value ASAWebVPNSmartTunnelAutoStart, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSmartTunnelAutoStart(i)
	return
}

func ASAWebVPNSmartTunnelAutoStart_Set(p *radius.Packet, value ASAWebVPNSmartTunnelAutoStart) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 138, a)
}

func ASAWebVPNSmartTunnelAutoStart_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 138)
}

func ASASmartTunnelAutoSignonEnable_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 139, a)
}

func ASASmartTunnelAutoSignonEnable_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 139, a)
}

func ASASmartTunnelAutoSignonEnable_Get(p *radius.Packet) (value []byte) {
	value, _ = ASASmartTunnelAutoSignonEnable_Lookup(p)
	return
}

func ASASmartTunnelAutoSignonEnable_GetString(p *radius.Packet) (value string) {
	value, _ = ASASmartTunnelAutoSignonEnable_LookupString(p)
	return
}

func ASASmartTunnelAutoSignonEnable_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 139) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASmartTunnelAutoSignonEnable_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 139) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASASmartTunnelAutoSignonEnable_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASASmartTunnelAutoSignonEnable_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASASmartTunnelAutoSignonEnable_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 139, a)
}

func ASASmartTunnelAutoSignonEnable_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 139, a)
}

func ASASmartTunnelAutoSignonEnable_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 139)
}

func ASAWebVPNSmartTunnelAutoSignOn_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 139, a)
}

func ASAWebVPNSmartTunnelAutoSignOn_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 139, a)
}

func ASAWebVPNSmartTunnelAutoSignOn_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNSmartTunnelAutoSignOn_Lookup(p)
	return
}

func ASAWebVPNSmartTunnelAutoSignOn_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNSmartTunnelAutoSignOn_LookupString(p)
	return
}

func ASAWebVPNSmartTunnelAutoSignOn_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 139) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNSmartTunnelAutoSignOn_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 139) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNSmartTunnelAutoSignOn_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNSmartTunnelAutoSignOn_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNSmartTunnelAutoSignOn_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 139, a)
}

func ASAWebVPNSmartTunnelAutoSignOn_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 139, a)
}

func ASAWebVPNSmartTunnelAutoSignOn_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 139)
}

type ASAVLAN uint32

var ASAVLAN_Strings = map[ASAVLAN]string{}

func (a ASAVLAN) String() string {
	if str, ok := ASAVLAN_Strings[a]; ok {
		return str
	}
	return "ASAVLAN(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAVLAN_Add(p *radius.Packet, value ASAVLAN) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 140, a)
}

func ASAVLAN_Get(p *radius.Packet) (value ASAVLAN) {
	value, _ = ASAVLAN_Lookup(p)
	return
}

func ASAVLAN_Gets(p *radius.Packet) (values []ASAVLAN, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 140) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAVLAN(i))
	}
	return
}

func ASAVLAN_Lookup(p *radius.Packet) (value ASAVLAN, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAVLAN(i)
	return
}

func ASAVLAN_Set(p *radius.Packet, value ASAVLAN) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 140, a)
}

func ASAVLAN_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 140)
}

func ASANACSettings_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 141, a)
}

func ASANACSettings_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 141, a)
}

func ASANACSettings_Get(p *radius.Packet) (value []byte) {
	value, _ = ASANACSettings_Lookup(p)
	return
}

func ASANACSettings_GetString(p *radius.Packet) (value string) {
	value, _ = ASANACSettings_LookupString(p)
	return
}

func ASANACSettings_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 141) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASANACSettings_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 141) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASANACSettings_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASANACSettings_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASANACSettings_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 141, a)
}

func ASANACSettings_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 141, a)
}

func ASANACSettings_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 141)
}

func ASAMemberOf_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 145, a)
}

func ASAMemberOf_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 145, a)
}

func ASAMemberOf_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAMemberOf_Lookup(p)
	return
}

func ASAMemberOf_GetString(p *radius.Packet) (value string) {
	value, _ = ASAMemberOf_LookupString(p)
	return
}

func ASAMemberOf_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 145) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAMemberOf_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 145) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAMemberOf_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAMemberOf_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAMemberOf_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 145, a)
}

func ASAMemberOf_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 145, a)
}

func ASAMemberOf_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 145)
}

func ASATunnelGroupName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 146, a)
}

func ASATunnelGroupName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 146, a)
}

func ASATunnelGroupName_Get(p *radius.Packet) (value []byte) {
	value, _ = ASATunnelGroupName_Lookup(p)
	return
}

func ASATunnelGroupName_GetString(p *radius.Packet) (value string) {
	value, _ = ASATunnelGroupName_LookupString(p)
	return
}

func ASATunnelGroupName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 146) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASATunnelGroupName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 146) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASATunnelGroupName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASATunnelGroupName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASATunnelGroupName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 146, a)
}

func ASATunnelGroupName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 146, a)
}

func ASATunnelGroupName_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 146)
}

type ASAWebVPNIdleTimeoutAlertInterval uint32

var ASAWebVPNIdleTimeoutAlertInterval_Strings = map[ASAWebVPNIdleTimeoutAlertInterval]string{}

func (a ASAWebVPNIdleTimeoutAlertInterval) String() string {
	if str, ok := ASAWebVPNIdleTimeoutAlertInterval_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNIdleTimeoutAlertInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNIdleTimeoutAlertInterval_Add(p *radius.Packet, value ASAWebVPNIdleTimeoutAlertInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 148, a)
}

func ASAWebVPNIdleTimeoutAlertInterval_Get(p *radius.Packet) (value ASAWebVPNIdleTimeoutAlertInterval) {
	value, _ = ASAWebVPNIdleTimeoutAlertInterval_Lookup(p)
	return
}

func ASAWebVPNIdleTimeoutAlertInterval_Gets(p *radius.Packet) (values []ASAWebVPNIdleTimeoutAlertInterval, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 148) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNIdleTimeoutAlertInterval(i))
	}
	return
}

func ASAWebVPNIdleTimeoutAlertInterval_Lookup(p *radius.Packet) (value ASAWebVPNIdleTimeoutAlertInterval, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNIdleTimeoutAlertInterval(i)
	return
}

func ASAWebVPNIdleTimeoutAlertInterval_Set(p *radius.Packet, value ASAWebVPNIdleTimeoutAlertInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 148, a)
}

func ASAWebVPNIdleTimeoutAlertInterval_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 148)
}

type ASAWebVPNSessionTimeoutAlertInterval uint32

var ASAWebVPNSessionTimeoutAlertInterval_Strings = map[ASAWebVPNSessionTimeoutAlertInterval]string{}

func (a ASAWebVPNSessionTimeoutAlertInterval) String() string {
	if str, ok := ASAWebVPNSessionTimeoutAlertInterval_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSessionTimeoutAlertInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSessionTimeoutAlertInterval_Add(p *radius.Packet, value ASAWebVPNSessionTimeoutAlertInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 149, a)
}

func ASAWebVPNSessionTimeoutAlertInterval_Get(p *radius.Packet) (value ASAWebVPNSessionTimeoutAlertInterval) {
	value, _ = ASAWebVPNSessionTimeoutAlertInterval_Lookup(p)
	return
}

func ASAWebVPNSessionTimeoutAlertInterval_Gets(p *radius.Packet) (values []ASAWebVPNSessionTimeoutAlertInterval, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 149) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSessionTimeoutAlertInterval(i))
	}
	return
}

func ASAWebVPNSessionTimeoutAlertInterval_Lookup(p *radius.Packet) (value ASAWebVPNSessionTimeoutAlertInterval, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSessionTimeoutAlertInterval(i)
	return
}

func ASAWebVPNSessionTimeoutAlertInterval_Set(p *radius.Packet, value ASAWebVPNSessionTimeoutAlertInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 149, a)
}

func ASAWebVPNSessionTimeoutAlertInterval_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 149)
}

type ASAClientType uint32

const (
	ASAClientType_Value_CiscoVPNClientIKEv1           ASAClientType = 1
	ASAClientType_Value_AnyConnectClientSSLVPN        ASAClientType = 2
	ASAClientType_Value_ClientlessSSLVPN              ASAClientType = 3
	ASAClientType_Value_CutThroughProxy               ASAClientType = 4
	ASAClientType_Value_L2TPIPsecSSLVPN               ASAClientType = 5
	ASAClientType_Value_AnyConnectClientIPSecVPNIKEv2 ASAClientType = 6
)

var ASAClientType_Strings = map[ASAClientType]string{
	ASAClientType_Value_CiscoVPNClientIKEv1:           "Cisco-VPN-Client-IKEv1",
	ASAClientType_Value_AnyConnectClientSSLVPN:        "AnyConnect-Client-SSL-VPN",
	ASAClientType_Value_ClientlessSSLVPN:              "Clientless-SSL-VPN",
	ASAClientType_Value_CutThroughProxy:               "Cut-Through-Proxy",
	ASAClientType_Value_L2TPIPsecSSLVPN:               "L2TP/IPsec-SSL-VPN",
	ASAClientType_Value_AnyConnectClientIPSecVPNIKEv2: "AnyConnect-Client-IPSec-VPN-IKEv2",
}

func (a ASAClientType) String() string {
	if str, ok := ASAClientType_Strings[a]; ok {
		return str
	}
	return "ASAClientType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAClientType_Add(p *radius.Packet, value ASAClientType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 150, a)
}

func ASAClientType_Get(p *radius.Packet) (value ASAClientType) {
	value, _ = ASAClientType_Lookup(p)
	return
}

func ASAClientType_Gets(p *radius.Packet) (values []ASAClientType, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 150) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAClientType(i))
	}
	return
}

func ASAClientType_Lookup(p *radius.Packet) (value ASAClientType, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAClientType(i)
	return
}

func ASAClientType_Set(p *radius.Packet, value ASAClientType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 150, a)
}

func ASAClientType_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 150)
}

type ASASessionType uint32

const (
	ASASessionType_Value_None                          ASASessionType = 0
	ASASessionType_Value_AnyConnectClientSSLVPN        ASASessionType = 1
	ASASessionType_Value_AnyConnectClientIPSecVPNIKEv2 ASASessionType = 2
	ASASessionType_Value_ClientlessSSLVPN              ASASessionType = 3
	ASASessionType_Value_ClientlessEmailProxy          ASASessionType = 4
	ASASessionType_Value_CiscoVPNClientIKEv1           ASASessionType = 5
	ASASessionType_Value_IKEv1LANToLAN                 ASASessionType = 6
	ASASessionType_Value_IKEv2LANToLAN                 ASASessionType = 7
	ASASessionType_Value_VPNLoadBalancing              ASASessionType = 8
)

var ASASessionType_Strings = map[ASASessionType]string{
	ASASessionType_Value_None:                          "None",
	ASASessionType_Value_AnyConnectClientSSLVPN:        "AnyConnect-Client-SSL-VPN",
	ASASessionType_Value_AnyConnectClientIPSecVPNIKEv2: "AnyConnect-Client-IPSec-VPN/IKEv2",
	ASASessionType_Value_ClientlessSSLVPN:              "Clientless-SSL-VPN",
	ASASessionType_Value_ClientlessEmailProxy:          "Clientless-Email-Proxy",
	ASASessionType_Value_CiscoVPNClientIKEv1:           "Cisco-VPN-Client/IKEv1",
	ASASessionType_Value_IKEv1LANToLAN:                 "IKEv1-LAN-to-LAN",
	ASASessionType_Value_IKEv2LANToLAN:                 "IKEv2-LAN-to-LAN",
	ASASessionType_Value_VPNLoadBalancing:              "VPN-Load-Balancing",
}

func (a ASASessionType) String() string {
	if str, ok := ASASessionType_Strings[a]; ok {
		return str
	}
	return "ASASessionType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASessionType_Add(p *radius.Packet, value ASASessionType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 151, a)
}

func ASASessionType_Get(p *radius.Packet) (value ASASessionType) {
	value, _ = ASASessionType_Lookup(p)
	return
}

func ASASessionType_Gets(p *radius.Packet) (values []ASASessionType, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 151) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASessionType(i))
	}
	return
}

func ASASessionType_Lookup(p *radius.Packet) (value ASASessionType, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASessionType(i)
	return
}

func ASASessionType_Set(p *radius.Packet, value ASASessionType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 151, a)
}

func ASASessionType_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 151)
}

type ASASessionSubtype uint32

const (
	ASASessionSubtype_Value_None       ASASessionSubtype = 0
	ASASessionSubtype_Value_Clientless ASASessionSubtype = 1
	ASASessionSubtype_Value_Client     ASASessionSubtype = 2
	ASASessionSubtype_Value_ClientOnly ASASessionSubtype = 3
)

var ASASessionSubtype_Strings = map[ASASessionSubtype]string{
	ASASessionSubtype_Value_None:       "None",
	ASASessionSubtype_Value_Clientless: "Clientless",
	ASASessionSubtype_Value_Client:     "Client",
	ASASessionSubtype_Value_ClientOnly: "Client-Only",
}

func (a ASASessionSubtype) String() string {
	if str, ok := ASASessionSubtype_Strings[a]; ok {
		return str
	}
	return "ASASessionSubtype(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASASessionSubtype_Add(p *radius.Packet, value ASASessionSubtype) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 152, a)
}

func ASASessionSubtype_Get(p *radius.Packet) (value ASASessionSubtype) {
	value, _ = ASASessionSubtype_Lookup(p)
	return
}

func ASASessionSubtype_Gets(p *radius.Packet) (values []ASASessionSubtype, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 152) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASASessionSubtype(i))
	}
	return
}

func ASASessionSubtype_Lookup(p *radius.Packet) (value ASASessionSubtype, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASASessionSubtype(i)
	return
}

func ASASessionSubtype_Set(p *radius.Packet, value ASASessionSubtype) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 152, a)
}

func ASASessionSubtype_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 152)
}

type ASAWebVPNDownloadMaxSize uint32

var ASAWebVPNDownloadMaxSize_Strings = map[ASAWebVPNDownloadMaxSize]string{}

func (a ASAWebVPNDownloadMaxSize) String() string {
	if str, ok := ASAWebVPNDownloadMaxSize_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNDownloadMaxSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNDownloadMaxSize_Add(p *radius.Packet, value ASAWebVPNDownloadMaxSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 157, a)
}

func ASAWebVPNDownloadMaxSize_Get(p *radius.Packet) (value ASAWebVPNDownloadMaxSize) {
	value, _ = ASAWebVPNDownloadMaxSize_Lookup(p)
	return
}

func ASAWebVPNDownloadMaxSize_Gets(p *radius.Packet) (values []ASAWebVPNDownloadMaxSize, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 157) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNDownloadMaxSize(i))
	}
	return
}

func ASAWebVPNDownloadMaxSize_Lookup(p *radius.Packet) (value ASAWebVPNDownloadMaxSize, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNDownloadMaxSize(i)
	return
}

func ASAWebVPNDownloadMaxSize_Set(p *radius.Packet, value ASAWebVPNDownloadMaxSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 157, a)
}

func ASAWebVPNDownloadMaxSize_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 157)
}

type ASAWebVPNUploadMaxSize uint32

var ASAWebVPNUploadMaxSize_Strings = map[ASAWebVPNUploadMaxSize]string{}

func (a ASAWebVPNUploadMaxSize) String() string {
	if str, ok := ASAWebVPNUploadMaxSize_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNUploadMaxSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNUploadMaxSize_Add(p *radius.Packet, value ASAWebVPNUploadMaxSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 158, a)
}

func ASAWebVPNUploadMaxSize_Get(p *radius.Packet) (value ASAWebVPNUploadMaxSize) {
	value, _ = ASAWebVPNUploadMaxSize_Lookup(p)
	return
}

func ASAWebVPNUploadMaxSize_Gets(p *radius.Packet) (values []ASAWebVPNUploadMaxSize, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 158) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNUploadMaxSize(i))
	}
	return
}

func ASAWebVPNUploadMaxSize_Lookup(p *radius.Packet) (value ASAWebVPNUploadMaxSize, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 158)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNUploadMaxSize(i)
	return
}

func ASAWebVPNUploadMaxSize_Set(p *radius.Packet, value ASAWebVPNUploadMaxSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 158, a)
}

func ASAWebVPNUploadMaxSize_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 158)
}

type ASAWebVPNPostMaxSize uint32

var ASAWebVPNPostMaxSize_Strings = map[ASAWebVPNPostMaxSize]string{}

func (a ASAWebVPNPostMaxSize) String() string {
	if str, ok := ASAWebVPNPostMaxSize_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNPostMaxSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNPostMaxSize_Add(p *radius.Packet, value ASAWebVPNPostMaxSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 159, a)
}

func ASAWebVPNPostMaxSize_Get(p *radius.Packet) (value ASAWebVPNPostMaxSize) {
	value, _ = ASAWebVPNPostMaxSize_Lookup(p)
	return
}

func ASAWebVPNPostMaxSize_Gets(p *radius.Packet) (values []ASAWebVPNPostMaxSize, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 159) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNPostMaxSize(i))
	}
	return
}

func ASAWebVPNPostMaxSize_Lookup(p *radius.Packet) (value ASAWebVPNPostMaxSize, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 159)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNPostMaxSize(i)
	return
}

func ASAWebVPNPostMaxSize_Set(p *radius.Packet, value ASAWebVPNPostMaxSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 159, a)
}

func ASAWebVPNPostMaxSize_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 159)
}

func ASAWebVPNUserStorage_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 160, a)
}

func ASAWebVPNUserStorage_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 160, a)
}

func ASAWebVPNUserStorage_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNUserStorage_Lookup(p)
	return
}

func ASAWebVPNUserStorage_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNUserStorage_LookupString(p)
	return
}

func ASAWebVPNUserStorage_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 160) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNUserStorage_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 160) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNUserStorage_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNUserStorage_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNUserStorage_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 160, a)
}

func ASAWebVPNUserStorage_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 160, a)
}

func ASAWebVPNUserStorage_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 160)
}

func ASAWebVPNStorageObjects_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 161, a)
}

func ASAWebVPNStorageObjects_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 161, a)
}

func ASAWebVPNStorageObjects_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNStorageObjects_Lookup(p)
	return
}

func ASAWebVPNStorageObjects_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNStorageObjects_LookupString(p)
	return
}

func ASAWebVPNStorageObjects_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 161) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNStorageObjects_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 161) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNStorageObjects_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNStorageObjects_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNStorageObjects_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 161, a)
}

func ASAWebVPNStorageObjects_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 161, a)
}

func ASAWebVPNStorageObjects_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 161)
}

func ASAWebVPNStorageKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 162, a)
}

func ASAWebVPNStorageKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 162, a)
}

func ASAWebVPNStorageKey_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNStorageKey_Lookup(p)
	return
}

func ASAWebVPNStorageKey_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNStorageKey_LookupString(p)
	return
}

func ASAWebVPNStorageKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 162) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNStorageKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 162) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNStorageKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNStorageKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNStorageKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 162, a)
}

func ASAWebVPNStorageKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 162, a)
}

func ASAWebVPNStorageKey_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 162)
}

func ASAWebVPNVDI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 163, a)
}

func ASAWebVPNVDI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 163, a)
}

func ASAWebVPNVDI_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNVDI_Lookup(p)
	return
}

func ASAWebVPNVDI_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNVDI_LookupString(p)
	return
}

func ASAWebVPNVDI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 163) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNVDI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 163) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNVDI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNVDI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNVDI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 163, a)
}

func ASAWebVPNVDI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 163, a)
}

func ASAWebVPNVDI_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 163)
}

func ASAAddressPools_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 217, a)
}

func ASAAddressPools_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 217, a)
}

func ASAAddressPools_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAAddressPools_Lookup(p)
	return
}

func ASAAddressPools_GetString(p *radius.Packet) (value string) {
	value, _ = ASAAddressPools_LookupString(p)
	return
}

func ASAAddressPools_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 217) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAAddressPools_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 217) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAAddressPools_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAAddressPools_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAAddressPools_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 217, a)
}

func ASAAddressPools_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 217, a)
}

func ASAAddressPools_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 217)
}

func ASAIPv6AddressPools_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 218, a)
}

func ASAIPv6AddressPools_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 218, a)
}

func ASAIPv6AddressPools_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIPv6AddressPools_Lookup(p)
	return
}

func ASAIPv6AddressPools_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIPv6AddressPools_LookupString(p)
	return
}

func ASAIPv6AddressPools_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 218) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPv6AddressPools_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 218) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPv6AddressPools_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 218)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIPv6AddressPools_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 218)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIPv6AddressPools_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 218, a)
}

func ASAIPv6AddressPools_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 218, a)
}

func ASAIPv6AddressPools_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 218)
}

func ASAIPv6VPNFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 219, a)
}

func ASAIPv6VPNFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 219, a)
}

func ASAIPv6VPNFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAIPv6VPNFilter_Lookup(p)
	return
}

func ASAIPv6VPNFilter_GetString(p *radius.Packet) (value string) {
	value, _ = ASAIPv6VPNFilter_LookupString(p)
	return
}

func ASAIPv6VPNFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 219) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPv6VPNFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 219) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAIPv6VPNFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 219)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAIPv6VPNFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 219)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAIPv6VPNFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 219, a)
}

func ASAIPv6VPNFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 219, a)
}

func ASAIPv6VPNFilter_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 219)
}

type ASAPrivilegeLevel uint32

var ASAPrivilegeLevel_Strings = map[ASAPrivilegeLevel]string{}

func (a ASAPrivilegeLevel) String() string {
	if str, ok := ASAPrivilegeLevel_Strings[a]; ok {
		return str
	}
	return "ASAPrivilegeLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAPrivilegeLevel_Add(p *radius.Packet, value ASAPrivilegeLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 220, a)
}

func ASAPrivilegeLevel_Get(p *radius.Packet) (value ASAPrivilegeLevel) {
	value, _ = ASAPrivilegeLevel_Lookup(p)
	return
}

func ASAPrivilegeLevel_Gets(p *radius.Packet) (values []ASAPrivilegeLevel, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 220) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAPrivilegeLevel(i))
	}
	return
}

func ASAPrivilegeLevel_Lookup(p *radius.Packet) (value ASAPrivilegeLevel, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 220)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAPrivilegeLevel(i)
	return
}

func ASAPrivilegeLevel_Set(p *radius.Packet, value ASAPrivilegeLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 220, a)
}

func ASAPrivilegeLevel_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 220)
}

type ASAWebVPNUNIXUserID uint32

var ASAWebVPNUNIXUserID_Strings = map[ASAWebVPNUNIXUserID]string{}

func (a ASAWebVPNUNIXUserID) String() string {
	if str, ok := ASAWebVPNUNIXUserID_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNUNIXUserID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNUNIXUserID_Add(p *radius.Packet, value ASAWebVPNUNIXUserID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 221, a)
}

func ASAWebVPNUNIXUserID_Get(p *radius.Packet) (value ASAWebVPNUNIXUserID) {
	value, _ = ASAWebVPNUNIXUserID_Lookup(p)
	return
}

func ASAWebVPNUNIXUserID_Gets(p *radius.Packet) (values []ASAWebVPNUNIXUserID, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 221) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNUNIXUserID(i))
	}
	return
}

func ASAWebVPNUNIXUserID_Lookup(p *radius.Packet) (value ASAWebVPNUNIXUserID, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 221)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNUNIXUserID(i)
	return
}

func ASAWebVPNUNIXUserID_Set(p *radius.Packet, value ASAWebVPNUNIXUserID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 221, a)
}

func ASAWebVPNUNIXUserID_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 221)
}

type ASAWebVPNUNIXGroupID uint32

var ASAWebVPNUNIXGroupID_Strings = map[ASAWebVPNUNIXGroupID]string{}

func (a ASAWebVPNUNIXGroupID) String() string {
	if str, ok := ASAWebVPNUNIXGroupID_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNUNIXGroupID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNUNIXGroupID_Add(p *radius.Packet, value ASAWebVPNUNIXGroupID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 222, a)
}

func ASAWebVPNUNIXGroupID_Get(p *radius.Packet) (value ASAWebVPNUNIXGroupID) {
	value, _ = ASAWebVPNUNIXGroupID_Lookup(p)
	return
}

func ASAWebVPNUNIXGroupID_Gets(p *radius.Packet) (values []ASAWebVPNUNIXGroupID, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 222) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNUNIXGroupID(i))
	}
	return
}

func ASAWebVPNUNIXGroupID_Lookup(p *radius.Packet) (value ASAWebVPNUNIXGroupID, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 222)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNUNIXGroupID(i)
	return
}

func ASAWebVPNUNIXGroupID_Set(p *radius.Packet, value ASAWebVPNUNIXGroupID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 222, a)
}

func ASAWebVPNUNIXGroupID_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 222)
}

func ASAWebVPNMacroSubstitutionValue1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 223, a)
}

func ASAWebVPNMacroSubstitutionValue1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 223, a)
}

func ASAWebVPNMacroSubstitutionValue1_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNMacroSubstitutionValue1_Lookup(p)
	return
}

func ASAWebVPNMacroSubstitutionValue1_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNMacroSubstitutionValue1_LookupString(p)
	return
}

func ASAWebVPNMacroSubstitutionValue1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 223) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNMacroSubstitutionValue1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 223) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNMacroSubstitutionValue1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 223)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNMacroSubstitutionValue1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 223)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNMacroSubstitutionValue1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 223, a)
}

func ASAWebVPNMacroSubstitutionValue1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 223, a)
}

func ASAWebVPNMacroSubstitutionValue1_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 223)
}

func ASAWebVPNMacroSubstitutionValue2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 224, a)
}

func ASAWebVPNMacroSubstitutionValue2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 224, a)
}

func ASAWebVPNMacroSubstitutionValue2_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNMacroSubstitutionValue2_Lookup(p)
	return
}

func ASAWebVPNMacroSubstitutionValue2_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNMacroSubstitutionValue2_LookupString(p)
	return
}

func ASAWebVPNMacroSubstitutionValue2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 224) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNMacroSubstitutionValue2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 224) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNMacroSubstitutionValue2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 224)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNMacroSubstitutionValue2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 224)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNMacroSubstitutionValue2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 224, a)
}

func ASAWebVPNMacroSubstitutionValue2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 224, a)
}

func ASAWebVPNMacroSubstitutionValue2_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 224)
}

type ASAWebVPNSmartCardRemovalDisconnect uint32

const (
	ASAWebVPNSmartCardRemovalDisconnect_Value_Disabled ASAWebVPNSmartCardRemovalDisconnect = 0
	ASAWebVPNSmartCardRemovalDisconnect_Value_Enabled  ASAWebVPNSmartCardRemovalDisconnect = 1
)

var ASAWebVPNSmartCardRemovalDisconnect_Strings = map[ASAWebVPNSmartCardRemovalDisconnect]string{
	ASAWebVPNSmartCardRemovalDisconnect_Value_Disabled: "Disabled",
	ASAWebVPNSmartCardRemovalDisconnect_Value_Enabled:  "Enabled",
}

func (a ASAWebVPNSmartCardRemovalDisconnect) String() string {
	if str, ok := ASAWebVPNSmartCardRemovalDisconnect_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNSmartCardRemovalDisconnect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNSmartCardRemovalDisconnect_Add(p *radius.Packet, value ASAWebVPNSmartCardRemovalDisconnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 225, a)
}

func ASAWebVPNSmartCardRemovalDisconnect_Get(p *radius.Packet) (value ASAWebVPNSmartCardRemovalDisconnect) {
	value, _ = ASAWebVPNSmartCardRemovalDisconnect_Lookup(p)
	return
}

func ASAWebVPNSmartCardRemovalDisconnect_Gets(p *radius.Packet) (values []ASAWebVPNSmartCardRemovalDisconnect, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 225) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNSmartCardRemovalDisconnect(i))
	}
	return
}

func ASAWebVPNSmartCardRemovalDisconnect_Lookup(p *radius.Packet) (value ASAWebVPNSmartCardRemovalDisconnect, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 225)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNSmartCardRemovalDisconnect(i)
	return
}

func ASAWebVPNSmartCardRemovalDisconnect_Set(p *radius.Packet, value ASAWebVPNSmartCardRemovalDisconnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 225, a)
}

func ASAWebVPNSmartCardRemovalDisconnect_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 225)
}

func ASAWebVPNSmartTunnelTunnelPolicy_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 227, a)
}

func ASAWebVPNSmartTunnelTunnelPolicy_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_AddVendor(p, 227, a)
}

func ASAWebVPNSmartTunnelTunnelPolicy_Get(p *radius.Packet) (value []byte) {
	value, _ = ASAWebVPNSmartTunnelTunnelPolicy_Lookup(p)
	return
}

func ASAWebVPNSmartTunnelTunnelPolicy_GetString(p *radius.Packet) (value string) {
	value, _ = ASAWebVPNSmartTunnelTunnelPolicy_LookupString(p)
	return
}

func ASAWebVPNSmartTunnelTunnelPolicy_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CiscoASA_GetsVendor(p, 227) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNSmartTunnelTunnelPolicy_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CiscoASA_GetsVendor(p, 227) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASAWebVPNSmartTunnelTunnelPolicy_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 227)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASAWebVPNSmartTunnelTunnelPolicy_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 227)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASAWebVPNSmartTunnelTunnelPolicy_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 227, a)
}

func ASAWebVPNSmartTunnelTunnelPolicy_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CiscoASA_SetVendor(p, 227, a)
}

func ASAWebVPNSmartTunnelTunnelPolicy_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 227)
}

type ASAWebVPNHomePageUseSmartTunnel uint32

var ASAWebVPNHomePageUseSmartTunnel_Strings = map[ASAWebVPNHomePageUseSmartTunnel]string{}

func (a ASAWebVPNHomePageUseSmartTunnel) String() string {
	if str, ok := ASAWebVPNHomePageUseSmartTunnel_Strings[a]; ok {
		return str
	}
	return "ASAWebVPNHomePageUseSmartTunnel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASAWebVPNHomePageUseSmartTunnel_Add(p *radius.Packet, value ASAWebVPNHomePageUseSmartTunnel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_AddVendor(p, 228, a)
}

func ASAWebVPNHomePageUseSmartTunnel_Get(p *radius.Packet) (value ASAWebVPNHomePageUseSmartTunnel) {
	value, _ = ASAWebVPNHomePageUseSmartTunnel_Lookup(p)
	return
}

func ASAWebVPNHomePageUseSmartTunnel_Gets(p *radius.Packet) (values []ASAWebVPNHomePageUseSmartTunnel, err error) {
	var i uint32
	for _, attr := range _CiscoASA_GetsVendor(p, 228) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASAWebVPNHomePageUseSmartTunnel(i))
	}
	return
}

func ASAWebVPNHomePageUseSmartTunnel_Lookup(p *radius.Packet) (value ASAWebVPNHomePageUseSmartTunnel, err error) {
	a, ok := _CiscoASA_LookupVendor(p, 228)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASAWebVPNHomePageUseSmartTunnel(i)
	return
}

func ASAWebVPNHomePageUseSmartTunnel_Set(p *radius.Packet, value ASAWebVPNHomePageUseSmartTunnel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CiscoASA_SetVendor(p, 228, a)
}

func ASAWebVPNHomePageUseSmartTunnel_Del(p *radius.Packet) {
	_CiscoASA_DelVendor(p, 228)
}
